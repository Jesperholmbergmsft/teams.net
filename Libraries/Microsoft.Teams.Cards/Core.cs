// This file was automatically generated by a tool on 05/07/2025, 12:49 AM UTC.
// It includes declarations for Adaptive Card features available in Teams.

#pragma warning disable IDE0290

using System.Text.Json;
using System.Text.Json.Serialization;

using Microsoft.Teams.Common;

namespace Microsoft.Teams.Cards;

[JsonConverter(typeof(JsonConverter<ActionStyle>))]
public class ActionStyle(string value) : StringEnum(value, caseSensitive: false)
{
    public static readonly ActionStyle Default = new("default");
    public bool IsDefault => Default.Equals(Value);

    public static readonly ActionStyle Positive = new("positive");
    public bool IsPositive => Positive.Equals(Value);

    public static readonly ActionStyle Destructive = new("destructive");
    public bool IsDestructive => Destructive.Equals(Value);
}

[JsonConverter(typeof(JsonConverter<ActionMode>))]
public class ActionMode(string value) : StringEnum(value, caseSensitive: false)
{
    public static readonly ActionMode Primary = new("primary");
    public bool IsPrimary => Primary.Equals(Value);

    public static readonly ActionMode Secondary = new("secondary");
    public bool IsSecondary => Secondary.Equals(Value);
}

[JsonConverter(typeof(JsonConverter<AssociatedInputs>))]
public class AssociatedInputs(string value) : StringEnum(value, caseSensitive: false)
{
    public static readonly AssociatedInputs Auto = new("auto");
    public bool IsAuto => Auto.Equals(Value);

    public static readonly AssociatedInputs None = new("none");
    public bool IsNone => None.Equals(Value);
}

[JsonConverter(typeof(JsonConverter<FallbackAction>))]
public class FallbackAction(string value) : StringEnum(value, caseSensitive: false)
{
    public static readonly FallbackAction Drop = new("drop");
    public bool IsDrop => Drop.Equals(Value);
}

[JsonConverter(typeof(JsonConverter<ContainerStyle>))]
public class ContainerStyle(string value) : StringEnum(value, caseSensitive: false)
{
    public static readonly ContainerStyle Default = new("default");
    public bool IsDefault => Default.Equals(Value);

    public static readonly ContainerStyle Emphasis = new("emphasis");
    public bool IsEmphasis => Emphasis.Equals(Value);

    public static readonly ContainerStyle Accent = new("accent");
    public bool IsAccent => Accent.Equals(Value);

    public static readonly ContainerStyle Good = new("good");
    public bool IsGood => Good.Equals(Value);

    public static readonly ContainerStyle Attention = new("attention");
    public bool IsAttention => Attention.Equals(Value);

    public static readonly ContainerStyle Warning = new("warning");
    public bool IsWarning => Warning.Equals(Value);
}

[JsonConverter(typeof(JsonConverter<TargetWidth>))]
public class TargetWidth(string value) : StringEnum(value, caseSensitive: false)
{
    public static readonly TargetWidth VeryNarrow = new("VeryNarrow");
    public bool IsVeryNarrow => VeryNarrow.Equals(Value);

    public static readonly TargetWidth Narrow = new("Narrow");
    public bool IsNarrow => Narrow.Equals(Value);

    public static readonly TargetWidth Standard = new("Standard");
    public bool IsStandard => Standard.Equals(Value);

    public static readonly TargetWidth Wide = new("Wide");
    public bool IsWide => Wide.Equals(Value);

    public static readonly TargetWidth AtLeastVeryNarrow = new("atLeast:VeryNarrow");
    public bool IsAtLeastVeryNarrow => AtLeastVeryNarrow.Equals(Value);

    public static readonly TargetWidth AtMostVeryNarrow = new("atMost:VeryNarrow");
    public bool IsAtMostVeryNarrow => AtMostVeryNarrow.Equals(Value);

    public static readonly TargetWidth AtLeastNarrow = new("atLeast:Narrow");
    public bool IsAtLeastNarrow => AtLeastNarrow.Equals(Value);

    public static readonly TargetWidth AtMostNarrow = new("atMost:Narrow");
    public bool IsAtMostNarrow => AtMostNarrow.Equals(Value);

    public static readonly TargetWidth AtLeastStandard = new("atLeast:Standard");
    public bool IsAtLeastStandard => AtLeastStandard.Equals(Value);

    public static readonly TargetWidth AtMostStandard = new("atMost:Standard");
    public bool IsAtMostStandard => AtMostStandard.Equals(Value);

    public static readonly TargetWidth AtLeastWide = new("atLeast:Wide");
    public bool IsAtLeastWide => AtLeastWide.Equals(Value);

    public static readonly TargetWidth AtMostWide = new("atMost:Wide");
    public bool IsAtMostWide => AtMostWide.Equals(Value);
}

[JsonConverter(typeof(JsonConverter<HorizontalAlignment>))]
public class HorizontalAlignment(string value) : StringEnum(value, caseSensitive: false)
{
    public static readonly HorizontalAlignment Left = new("Left");
    public bool IsLeft => Left.Equals(Value);

    public static readonly HorizontalAlignment Center = new("Center");
    public bool IsCenter => Center.Equals(Value);

    public static readonly HorizontalAlignment Right = new("Right");
    public bool IsRight => Right.Equals(Value);
}

[JsonConverter(typeof(JsonConverter<VerticalAlignment>))]
public class VerticalAlignment(string value) : StringEnum(value, caseSensitive: false)
{
    public static readonly VerticalAlignment Top = new("Top");
    public bool IsTop => Top.Equals(Value);

    public static readonly VerticalAlignment Center = new("Center");
    public bool IsCenter => Center.Equals(Value);

    public static readonly VerticalAlignment Bottom = new("Bottom");
    public bool IsBottom => Bottom.Equals(Value);
}

[JsonConverter(typeof(JsonConverter<FlowLayoutItemFit>))]
public class FlowLayoutItemFit(string value) : StringEnum(value, caseSensitive: false)
{
    public static readonly FlowLayoutItemFit Fit = new("Fit");
    public bool IsFit => Fit.Equals(Value);

    public static readonly FlowLayoutItemFit Fill = new("Fill");
    public bool IsFill => Fill.Equals(Value);
}

[JsonConverter(typeof(JsonConverter<Spacing>))]
public class Spacing(string value) : StringEnum(value, caseSensitive: false)
{
    public static readonly Spacing None = new("None");
    public bool IsNone => None.Equals(Value);

    public static readonly Spacing ExtraSmall = new("ExtraSmall");
    public bool IsExtraSmall => ExtraSmall.Equals(Value);

    public static readonly Spacing Small = new("Small");
    public bool IsSmall => Small.Equals(Value);

    public static readonly Spacing Default = new("Default");
    public bool IsDefault => Default.Equals(Value);

    public static readonly Spacing Medium = new("Medium");
    public bool IsMedium => Medium.Equals(Value);

    public static readonly Spacing Large = new("Large");
    public bool IsLarge => Large.Equals(Value);

    public static readonly Spacing ExtraLarge = new("ExtraLarge");
    public bool IsExtraLarge => ExtraLarge.Equals(Value);

    public static readonly Spacing Padding = new("Padding");
    public bool IsPadding => Padding.Equals(Value);
}

[JsonConverter(typeof(JsonConverter<FillMode>))]
public class FillMode(string value) : StringEnum(value, caseSensitive: false)
{
    public static readonly FillMode Cover = new("Cover");
    public bool IsCover => Cover.Equals(Value);

    public static readonly FillMode RepeatHorizontally = new("RepeatHorizontally");
    public bool IsRepeatHorizontally => RepeatHorizontally.Equals(Value);

    public static readonly FillMode RepeatVertically = new("RepeatVertically");
    public bool IsRepeatVertically => RepeatVertically.Equals(Value);

    public static readonly FillMode Repeat = new("Repeat");
    public bool IsRepeat => Repeat.Equals(Value);
}

[JsonConverter(typeof(JsonConverter<Version>))]
public class Version(string value) : StringEnum(value, caseSensitive: false)
{
    public static readonly Version Version1_0 = new("1.0");
    public bool IsVersion1_0 => Version1_0.Equals(Value);

    public static readonly Version Version1_1 = new("1.1");
    public bool IsVersion1_1 => Version1_1.Equals(Value);

    public static readonly Version Version1_2 = new("1.2");
    public bool IsVersion1_2 => Version1_2.Equals(Value);

    public static readonly Version Version1_3 = new("1.3");
    public bool IsVersion1_3 => Version1_3.Equals(Value);

    public static readonly Version Version1_4 = new("1.4");
    public bool IsVersion1_4 => Version1_4.Equals(Value);

    public static readonly Version Version1_5 = new("1.5");
    public bool IsVersion1_5 => Version1_5.Equals(Value);

    public static readonly Version Version1_6 = new("1.6");
    public bool IsVersion1_6 => Version1_6.Equals(Value);
}

[JsonConverter(typeof(JsonConverter<TeamsCardWidth>))]
public class TeamsCardWidth(string value) : StringEnum(value, caseSensitive: false)
{
    public static readonly TeamsCardWidth Full = new("full");
    public bool IsFull => Full.Equals(Value);
}

[JsonConverter(typeof(JsonConverter<MentionType>))]
public class MentionType(string value) : StringEnum(value, caseSensitive: false)
{
    public static readonly MentionType Person = new("Person");
    public bool IsPerson => Person.Equals(Value);

    public static readonly MentionType Tag = new("Tag");
    public bool IsTag => Tag.Equals(Value);
}

[JsonConverter(typeof(JsonConverter<ElementHeight>))]
public class ElementHeight(string value) : StringEnum(value, caseSensitive: false)
{
    public static readonly ElementHeight Auto = new("auto");
    public bool IsAuto => Auto.Equals(Value);

    public static readonly ElementHeight Stretch = new("stretch");
    public bool IsStretch => Stretch.Equals(Value);
}

[JsonConverter(typeof(JsonConverter<TextSize>))]
public class TextSize(string value) : StringEnum(value, caseSensitive: false)
{
    public static readonly TextSize Small = new("Small");
    public bool IsSmall => Small.Equals(Value);

    public static readonly TextSize Default = new("Default");
    public bool IsDefault => Default.Equals(Value);

    public static readonly TextSize Medium = new("Medium");
    public bool IsMedium => Medium.Equals(Value);

    public static readonly TextSize Large = new("Large");
    public bool IsLarge => Large.Equals(Value);

    public static readonly TextSize ExtraLarge = new("ExtraLarge");
    public bool IsExtraLarge => ExtraLarge.Equals(Value);
}

[JsonConverter(typeof(JsonConverter<TextWeight>))]
public class TextWeight(string value) : StringEnum(value, caseSensitive: false)
{
    public static readonly TextWeight Lighter = new("Lighter");
    public bool IsLighter => Lighter.Equals(Value);

    public static readonly TextWeight Default = new("Default");
    public bool IsDefault => Default.Equals(Value);

    public static readonly TextWeight Bolder = new("Bolder");
    public bool IsBolder => Bolder.Equals(Value);
}

[JsonConverter(typeof(JsonConverter<TextColor>))]
public class TextColor(string value) : StringEnum(value, caseSensitive: false)
{
    public static readonly TextColor Default = new("Default");
    public bool IsDefault => Default.Equals(Value);

    public static readonly TextColor Dark = new("Dark");
    public bool IsDark => Dark.Equals(Value);

    public static readonly TextColor Light = new("Light");
    public bool IsLight => Light.Equals(Value);

    public static readonly TextColor Accent = new("Accent");
    public bool IsAccent => Accent.Equals(Value);

    public static readonly TextColor Good = new("Good");
    public bool IsGood => Good.Equals(Value);

    public static readonly TextColor Warning = new("Warning");
    public bool IsWarning => Warning.Equals(Value);

    public static readonly TextColor Attention = new("Attention");
    public bool IsAttention => Attention.Equals(Value);
}

[JsonConverter(typeof(JsonConverter<FontType>))]
public class FontType(string value) : StringEnum(value, caseSensitive: false)
{
    public static readonly FontType Default = new("Default");
    public bool IsDefault => Default.Equals(Value);

    public static readonly FontType Monospace = new("Monospace");
    public bool IsMonospace => Monospace.Equals(Value);
}

[JsonConverter(typeof(JsonConverter<StyleEnum>))]
public class StyleEnum(string value) : StringEnum(value, caseSensitive: false)
{
    public static readonly StyleEnum Compact = new("compact");
    public bool IsCompact => Compact.Equals(Value);

    public static readonly StyleEnum Expanded = new("expanded");
    public bool IsExpanded => Expanded.Equals(Value);

    public static readonly StyleEnum Filtered = new("filtered");
    public bool IsFiltered => Filtered.Equals(Value);
}

[JsonConverter(typeof(JsonConverter<ImageStyle>))]
public class ImageStyle(string value) : StringEnum(value, caseSensitive: false)
{
    public static readonly ImageStyle Default = new("Default");
    public bool IsDefault => Default.Equals(Value);

    public static readonly ImageStyle Person = new("Person");
    public bool IsPerson => Person.Equals(Value);

    public static readonly ImageStyle RoundedCorners = new("RoundedCorners");
    public bool IsRoundedCorners => RoundedCorners.Equals(Value);
}

[JsonConverter(typeof(JsonConverter<Size>))]
public class Size(string value) : StringEnum(value, caseSensitive: false)
{
    public static readonly Size Auto = new("Auto");
    public bool IsAuto => Auto.Equals(Value);

    public static readonly Size Stretch = new("Stretch");
    public bool IsStretch => Stretch.Equals(Value);

    public static readonly Size Small = new("Small");
    public bool IsSmall => Small.Equals(Value);

    public static readonly Size Medium = new("Medium");
    public bool IsMedium => Medium.Equals(Value);

    public static readonly Size Large = new("Large");
    public bool IsLarge => Large.Equals(Value);
}

[JsonConverter(typeof(JsonConverter<InputTextStyle>))]
public class InputTextStyle(string value) : StringEnum(value, caseSensitive: false)
{
    public static readonly InputTextStyle Text = new("Text");
    public bool IsText => Text.Equals(Value);

    public static readonly InputTextStyle Tel = new("Tel");
    public bool IsTel => Tel.Equals(Value);

    public static readonly InputTextStyle Url = new("Url");
    public bool IsUrl => Url.Equals(Value);

    public static readonly InputTextStyle Email = new("Email");
    public bool IsEmail => Email.Equals(Value);

    public static readonly InputTextStyle Password = new("Password");
    public bool IsPassword => Password.Equals(Value);
}

[JsonConverter(typeof(JsonConverter<RatingSize>))]
public class RatingSize(string value) : StringEnum(value, caseSensitive: false)
{
    public static readonly RatingSize Medium = new("Medium");
    public bool IsMedium => Medium.Equals(Value);

    public static readonly RatingSize Large = new("Large");
    public bool IsLarge => Large.Equals(Value);
}

[JsonConverter(typeof(JsonConverter<RatingColor>))]
public class RatingColor(string value) : StringEnum(value, caseSensitive: false)
{
    public static readonly RatingColor Neutral = new("Neutral");
    public bool IsNeutral => Neutral.Equals(Value);

    public static readonly RatingColor Marigold = new("Marigold");
    public bool IsMarigold => Marigold.Equals(Value);
}

[JsonConverter(typeof(JsonConverter<RatingStyle>))]
public class RatingStyle(string value) : StringEnum(value, caseSensitive: false)
{
    public static readonly RatingStyle Default = new("Default");
    public bool IsDefault => Default.Equals(Value);

    public static readonly RatingStyle Compact = new("Compact");
    public bool IsCompact => Compact.Equals(Value);
}

[JsonConverter(typeof(JsonConverter<IconSize>))]
public class IconSize(string value) : StringEnum(value, caseSensitive: false)
{
    public static readonly IconSize XxSmall = new("xxSmall");
    public bool IsXxSmall => XxSmall.Equals(Value);

    public static readonly IconSize XSmall = new("xSmall");
    public bool IsXSmall => XSmall.Equals(Value);

    public static readonly IconSize Small = new("Small");
    public bool IsSmall => Small.Equals(Value);

    public static readonly IconSize Standard = new("Standard");
    public bool IsStandard => Standard.Equals(Value);

    public static readonly IconSize Medium = new("Medium");
    public bool IsMedium => Medium.Equals(Value);

    public static readonly IconSize Large = new("Large");
    public bool IsLarge => Large.Equals(Value);

    public static readonly IconSize XLarge = new("xLarge");
    public bool IsXLarge => XLarge.Equals(Value);

    public static readonly IconSize XxLarge = new("xxLarge");
    public bool IsXxLarge => XxLarge.Equals(Value);
}

[JsonConverter(typeof(JsonConverter<IconStyle>))]
public class IconStyle(string value) : StringEnum(value, caseSensitive: false)
{
    public static readonly IconStyle Regular = new("Regular");
    public bool IsRegular => Regular.Equals(Value);

    public static readonly IconStyle Filled = new("Filled");
    public bool IsFilled => Filled.Equals(Value);
}

[JsonConverter(typeof(JsonConverter<CarouselPageAnimation>))]
public class CarouselPageAnimation(string value) : StringEnum(value, caseSensitive: false)
{
    public static readonly CarouselPageAnimation Slide = new("Slide");
    public bool IsSlide => Slide.Equals(Value);

    public static readonly CarouselPageAnimation CrossFade = new("CrossFade");
    public bool IsCrossFade => CrossFade.Equals(Value);

    public static readonly CarouselPageAnimation None = new("None");
    public bool IsNone => None.Equals(Value);
}

[JsonConverter(typeof(JsonConverter<BadgeIconPosition>))]
public class BadgeIconPosition(string value) : StringEnum(value, caseSensitive: false)
{
    public static readonly BadgeIconPosition Before = new("Before");
    public bool IsBefore => Before.Equals(Value);

    public static readonly BadgeIconPosition After = new("After");
    public bool IsAfter => After.Equals(Value);
}

[JsonConverter(typeof(JsonConverter<BadgeAppearance>))]
public class BadgeAppearance(string value) : StringEnum(value, caseSensitive: false)
{
    public static readonly BadgeAppearance Filled = new("Filled");
    public bool IsFilled => Filled.Equals(Value);

    public static readonly BadgeAppearance Tint = new("Tint");
    public bool IsTint => Tint.Equals(Value);
}

[JsonConverter(typeof(JsonConverter<BadgeSize>))]
public class BadgeSize(string value) : StringEnum(value, caseSensitive: false)
{
    public static readonly BadgeSize Medium = new("Medium");
    public bool IsMedium => Medium.Equals(Value);

    public static readonly BadgeSize Large = new("Large");
    public bool IsLarge => Large.Equals(Value);

    public static readonly BadgeSize ExtraLarge = new("ExtraLarge");
    public bool IsExtraLarge => ExtraLarge.Equals(Value);
}

[JsonConverter(typeof(JsonConverter<BadgeShape>))]
public class BadgeShape(string value) : StringEnum(value, caseSensitive: false)
{
    public static readonly BadgeShape Square = new("Square");
    public bool IsSquare => Square.Equals(Value);

    public static readonly BadgeShape Rounded = new("Rounded");
    public bool IsRounded => Rounded.Equals(Value);

    public static readonly BadgeShape Circular = new("Circular");
    public bool IsCircular => Circular.Equals(Value);
}

[JsonConverter(typeof(JsonConverter<BadgeStyle>))]
public class BadgeStyle(string value) : StringEnum(value, caseSensitive: false)
{
    public static readonly BadgeStyle Default = new("Default");
    public bool IsDefault => Default.Equals(Value);

    public static readonly BadgeStyle Subtle = new("Subtle");
    public bool IsSubtle => Subtle.Equals(Value);

    public static readonly BadgeStyle Informative = new("Informative");
    public bool IsInformative => Informative.Equals(Value);

    public static readonly BadgeStyle Accent = new("Accent");
    public bool IsAccent => Accent.Equals(Value);

    public static readonly BadgeStyle Good = new("Good");
    public bool IsGood => Good.Equals(Value);

    public static readonly BadgeStyle Attention = new("Attention");
    public bool IsAttention => Attention.Equals(Value);

    public static readonly BadgeStyle Warning = new("Warning");
    public bool IsWarning => Warning.Equals(Value);
}

[JsonConverter(typeof(JsonConverter<ChartColorSet>))]
public class ChartColorSet(string value) : StringEnum(value, caseSensitive: false)
{
    public static readonly ChartColorSet Categorical = new("categorical");
    public bool IsCategorical => Categorical.Equals(Value);

    public static readonly ChartColorSet Sequential = new("sequential");
    public bool IsSequential => Sequential.Equals(Value);

    public static readonly ChartColorSet Diverging = new("diverging");
    public bool IsDiverging => Diverging.Equals(Value);
}

[JsonConverter(typeof(JsonConverter<ChartColor>))]
public class ChartColor(string value) : StringEnum(value, caseSensitive: false)
{
    public static readonly ChartColor Good = new("good");
    public bool IsGood => Good.Equals(Value);

    public static readonly ChartColor Warning = new("warning");
    public bool IsWarning => Warning.Equals(Value);

    public static readonly ChartColor Attention = new("attention");
    public bool IsAttention => Attention.Equals(Value);

    public static readonly ChartColor Neutral = new("neutral");
    public bool IsNeutral => Neutral.Equals(Value);

    public static readonly ChartColor CategoricalRed = new("categoricalRed");
    public bool IsCategoricalRed => CategoricalRed.Equals(Value);

    public static readonly ChartColor CategoricalPurple = new("categoricalPurple");
    public bool IsCategoricalPurple => CategoricalPurple.Equals(Value);

    public static readonly ChartColor CategoricalLavender = new("categoricalLavender");
    public bool IsCategoricalLavender => CategoricalLavender.Equals(Value);

    public static readonly ChartColor CategoricalBlue = new("categoricalBlue");
    public bool IsCategoricalBlue => CategoricalBlue.Equals(Value);

    public static readonly ChartColor CategoricalLightBlue = new("categoricalLightBlue");
    public bool IsCategoricalLightBlue => CategoricalLightBlue.Equals(Value);

    public static readonly ChartColor CategoricalTeal = new("categoricalTeal");
    public bool IsCategoricalTeal => CategoricalTeal.Equals(Value);

    public static readonly ChartColor CategoricalGreen = new("categoricalGreen");
    public bool IsCategoricalGreen => CategoricalGreen.Equals(Value);

    public static readonly ChartColor CategoricalLime = new("categoricalLime");
    public bool IsCategoricalLime => CategoricalLime.Equals(Value);

    public static readonly ChartColor CategoricalMarigold = new("categoricalMarigold");
    public bool IsCategoricalMarigold => CategoricalMarigold.Equals(Value);

    public static readonly ChartColor Sequential1 = new("sequential1");
    public bool IsSequential1 => Sequential1.Equals(Value);

    public static readonly ChartColor Sequential2 = new("sequential2");
    public bool IsSequential2 => Sequential2.Equals(Value);

    public static readonly ChartColor Sequential3 = new("sequential3");
    public bool IsSequential3 => Sequential3.Equals(Value);

    public static readonly ChartColor Sequential4 = new("sequential4");
    public bool IsSequential4 => Sequential4.Equals(Value);

    public static readonly ChartColor Sequential5 = new("sequential5");
    public bool IsSequential5 => Sequential5.Equals(Value);

    public static readonly ChartColor Sequential6 = new("sequential6");
    public bool IsSequential6 => Sequential6.Equals(Value);

    public static readonly ChartColor Sequential7 = new("sequential7");
    public bool IsSequential7 => Sequential7.Equals(Value);

    public static readonly ChartColor Sequential8 = new("sequential8");
    public bool IsSequential8 => Sequential8.Equals(Value);

    public static readonly ChartColor DivergingBlue = new("divergingBlue");
    public bool IsDivergingBlue => DivergingBlue.Equals(Value);

    public static readonly ChartColor DivergingLightBlue = new("divergingLightBlue");
    public bool IsDivergingLightBlue => DivergingLightBlue.Equals(Value);

    public static readonly ChartColor DivergingCyan = new("divergingCyan");
    public bool IsDivergingCyan => DivergingCyan.Equals(Value);

    public static readonly ChartColor DivergingTeal = new("divergingTeal");
    public bool IsDivergingTeal => DivergingTeal.Equals(Value);

    public static readonly ChartColor DivergingYellow = new("divergingYellow");
    public bool IsDivergingYellow => DivergingYellow.Equals(Value);

    public static readonly ChartColor DivergingPeach = new("divergingPeach");
    public bool IsDivergingPeach => DivergingPeach.Equals(Value);

    public static readonly ChartColor DivergingLightRed = new("divergingLightRed");
    public bool IsDivergingLightRed => DivergingLightRed.Equals(Value);

    public static readonly ChartColor DivergingRed = new("divergingRed");
    public bool IsDivergingRed => DivergingRed.Equals(Value);

    public static readonly ChartColor DivergingMaroon = new("divergingMaroon");
    public bool IsDivergingMaroon => DivergingMaroon.Equals(Value);

    public static readonly ChartColor DivergingGray = new("divergingGray");
    public bool IsDivergingGray => DivergingGray.Equals(Value);
}

[JsonConverter(typeof(JsonConverter<HorizontalBarChartDisplayMode>))]
public class HorizontalBarChartDisplayMode(string value) : StringEnum(value, caseSensitive: false)
{
    public static readonly HorizontalBarChartDisplayMode AbsoluteWithAxis = new("AbsoluteWithAxis");
    public bool IsAbsoluteWithAxis => AbsoluteWithAxis.Equals(Value);

    public static readonly HorizontalBarChartDisplayMode AbsoluteNoAxis = new("AbsoluteNoAxis");
    public bool IsAbsoluteNoAxis => AbsoluteNoAxis.Equals(Value);

    public static readonly HorizontalBarChartDisplayMode PartToWhole = new("PartToWhole");
    public bool IsPartToWhole => PartToWhole.Equals(Value);
}

[JsonConverter(typeof(JsonConverter<GaugeChartValueFormat>))]
public class GaugeChartValueFormat(string value) : StringEnum(value, caseSensitive: false)
{
    public static readonly GaugeChartValueFormat Percentage = new("Percentage");
    public bool IsPercentage => Percentage.Equals(Value);

    public static readonly GaugeChartValueFormat Fraction = new("Fraction");
    public bool IsFraction => Fraction.Equals(Value);
}

[JsonConverter(typeof(JsonConverter<CodeLanguage>))]
public class CodeLanguage(string value) : StringEnum(value, caseSensitive: false)
{
    public static readonly CodeLanguage Bash = new("Bash");
    public bool IsBash => Bash.Equals(Value);

    public static readonly CodeLanguage C = new("C");
    public bool IsC => C.Equals(Value);

    public static readonly CodeLanguage Cpp = new("Cpp");
    public bool IsCpp => Cpp.Equals(Value);

    public static readonly CodeLanguage CSharp = new("CSharp");
    public bool IsCSharp => CSharp.Equals(Value);

    public static readonly CodeLanguage Css = new("Css");
    public bool IsCss => Css.Equals(Value);

    public static readonly CodeLanguage Dos = new("Dos");
    public bool IsDos => Dos.Equals(Value);

    public static readonly CodeLanguage Go = new("Go");
    public bool IsGo => Go.Equals(Value);

    public static readonly CodeLanguage Graphql = new("Graphql");
    public bool IsGraphql => Graphql.Equals(Value);

    public static readonly CodeLanguage Html = new("Html");
    public bool IsHtml => Html.Equals(Value);

    public static readonly CodeLanguage Java = new("Java");
    public bool IsJava => Java.Equals(Value);

    public static readonly CodeLanguage JavaScript = new("JavaScript");
    public bool IsJavaScript => JavaScript.Equals(Value);

    public static readonly CodeLanguage Json = new("Json");
    public bool IsJson => Json.Equals(Value);

    public static readonly CodeLanguage ObjectiveC = new("ObjectiveC");
    public bool IsObjectiveC => ObjectiveC.Equals(Value);

    public static readonly CodeLanguage Perl = new("Perl");
    public bool IsPerl => Perl.Equals(Value);

    public static readonly CodeLanguage Php = new("Php");
    public bool IsPhp => Php.Equals(Value);

    public static readonly CodeLanguage PlainText = new("PlainText");
    public bool IsPlainText => PlainText.Equals(Value);

    public static readonly CodeLanguage PowerShell = new("PowerShell");
    public bool IsPowerShell => PowerShell.Equals(Value);

    public static readonly CodeLanguage Python = new("Python");
    public bool IsPython => Python.Equals(Value);

    public static readonly CodeLanguage Sql = new("Sql");
    public bool IsSql => Sql.Equals(Value);

    public static readonly CodeLanguage TypeScript = new("TypeScript");
    public bool IsTypeScript => TypeScript.Equals(Value);

    public static readonly CodeLanguage VbNet = new("VbNet");
    public bool IsVbNet => VbNet.Equals(Value);

    public static readonly CodeLanguage Verilog = new("Verilog");
    public bool IsVerilog => Verilog.Equals(Value);

    public static readonly CodeLanguage Vhdl = new("Vhdl");
    public bool IsVhdl => Vhdl.Equals(Value);

    public static readonly CodeLanguage Xml = new("Xml");
    public bool IsXml => Xml.Equals(Value);
}

[JsonConverter(typeof(JsonConverter<FallbackElement>))]
public class FallbackElement(string value) : StringEnum(value, caseSensitive: false)
{
    public static readonly FallbackElement Drop = new("drop");
    public bool IsDrop => Drop.Equals(Value);
}

[JsonConverter(typeof(JsonConverter<ImageSize>))]
public class ImageSize(string value) : StringEnum(value, caseSensitive: false)
{
    public static readonly ImageSize Small = new("Small");
    public bool IsSmall => Small.Equals(Value);

    public static readonly ImageSize Medium = new("Medium");
    public bool IsMedium => Medium.Equals(Value);

    public static readonly ImageSize Large = new("Large");
    public bool IsLarge => Large.Equals(Value);
}

public abstract class SerializableObject
{
    public override string ToString()
    {
        return JsonSerializer.Serialize(this, new JsonSerializerOptions()
        {
            WriteIndented = true,
            DefaultIgnoreCondition = JsonIgnoreCondition.WhenWritingNull
        });
    }
}

public abstract class CardElement : SerializableObject { }

public abstract class Action : SerializableObject { }

public abstract class ContainerLayout : SerializableObject { }

public class AdaptiveCard : CardElement
{
    [JsonPropertyName("type")]
    public string Type { get; } = "AdaptiveCard";

    [JsonPropertyName("id")]
    public string? Id { get; set; }

    [JsonPropertyName("requires")]
    public HostCapabilities? Requires { get; set; }

    [JsonPropertyName("lang")]
    public string? Lang { get; set; }

    [JsonPropertyName("isVisible")]
    public bool? IsVisible { get; set; }

    [JsonPropertyName("isSortKey")]
    public bool? IsSortKey { get; set; }

    [JsonPropertyName("selectAction")]
    public Action? SelectAction { get; set; }

    [JsonPropertyName("style")]
    public ContainerStyle? Style { get; set; }

    [JsonPropertyName("layouts")]
    public IList<ContainerLayout>? Layouts { get; set; }

    [JsonPropertyName("minHeight")]
    public string? MinHeight { get; set; }

    [JsonPropertyName("backgroundImage")]
    public IUnion<string, BackgroundImage>? BackgroundImage { get; set; }

    [JsonPropertyName("verticalContentAlignment")]
    public VerticalAlignment? VerticalContentAlignment { get; set; }

    [JsonPropertyName("rtl")]
    public bool? Rtl { get; set; }

    [JsonPropertyName("$schema")]
    public string? Schema { get; set; }

    [JsonPropertyName("version")]
    public Version? Version { get; set; }

    [JsonPropertyName("fallbackText")]
    public string? FallbackText { get; set; }

    [JsonPropertyName("speak")]
    public string? Speak { get; set; }

    [JsonPropertyName("refresh")]
    public RefreshDefinition? Refresh { get; set; }

    [JsonPropertyName("authentication")]
    public Authentication? Authentication { get; set; }

    [JsonPropertyName("msTeams")]
    public TeamsCardProperties? MsTeams { get; set; }

    [JsonPropertyName("metadata")]
    public CardMetadata? Metadata { get; set; }

    [JsonPropertyName("grid.area")]
    public string? GridArea { get; set; }

    [JsonPropertyName("fallback")]
    public IUnion<CardElement, FallbackElement>? Fallback { get; set; }

    [JsonPropertyName("body")]
    public IList<CardElement>? Body { get; set; }

    [JsonPropertyName("actions")]
    public IList<Action>? Actions { get; set; }

    public AdaptiveCard(params IList<CardElement> body)
    {
        this.Body = body;
    }

    public AdaptiveCard WithId(string value)
    {
        this.Id = value;
        return this;
    }

    public AdaptiveCard WithRequires(HostCapabilities value)
    {
        this.Requires = value;
        return this;
    }

    public AdaptiveCard WithLang(string value)
    {
        this.Lang = value;
        return this;
    }

    public AdaptiveCard WithIsVisible(bool value)
    {
        this.IsVisible = value;
        return this;
    }

    public AdaptiveCard WithIsSortKey(bool value)
    {
        this.IsSortKey = value;
        return this;
    }

    public AdaptiveCard WithSelectAction(Action value)
    {
        this.SelectAction = value;
        return this;
    }

    public AdaptiveCard WithStyle(ContainerStyle value)
    {
        this.Style = value;
        return this;
    }

    public AdaptiveCard WithLayouts(params IList<ContainerLayout> value)
    {
        this.Layouts = value;
        return this;
    }

    public AdaptiveCard WithMinHeight(string value)
    {
        this.MinHeight = value;
        return this;
    }

    public AdaptiveCard WithBackgroundImage(IUnion<string, BackgroundImage> value)
    {
        this.BackgroundImage = value;
        return this;
    }

    public AdaptiveCard WithVerticalContentAlignment(VerticalAlignment value)
    {
        this.VerticalContentAlignment = value;
        return this;
    }

    public AdaptiveCard WithRtl(bool value)
    {
        this.Rtl = value;
        return this;
    }

    public AdaptiveCard WithSchema(string value)
    {
        this.Schema = value;
        return this;
    }

    public AdaptiveCard WithVersion(Version value)
    {
        this.Version = value;
        return this;
    }

    public AdaptiveCard WithFallbackText(string value)
    {
        this.FallbackText = value;
        return this;
    }

    public AdaptiveCard WithSpeak(string value)
    {
        this.Speak = value;
        return this;
    }

    public AdaptiveCard WithRefresh(RefreshDefinition value)
    {
        this.Refresh = value;
        return this;
    }

    public AdaptiveCard WithAuthentication(Authentication value)
    {
        this.Authentication = value;
        return this;
    }

    public AdaptiveCard WithMsTeams(TeamsCardProperties value)
    {
        this.MsTeams = value;
        return this;
    }

    public AdaptiveCard WithMetadata(CardMetadata value)
    {
        this.Metadata = value;
        return this;
    }

    public AdaptiveCard WithGridArea(string value)
    {
        this.GridArea = value;
        return this;
    }

    public AdaptiveCard WithFallback(IUnion<CardElement, FallbackElement> value)
    {
        this.Fallback = value;
        return this;
    }

    public AdaptiveCard WithBody(params IList<CardElement> value)
    {
        this.Body = value;
        return this;
    }

    public AdaptiveCard WithActions(params IList<Action> value)
    {
        this.Actions = value;
        return this;
    }
}

public class HostCapabilities : SerializableObject
{
    [JsonExtensionData]
    public IDictionary<string, object?> NonSchemaProperties { get; set; } = new Dictionary<string, object?>();
}

public class ExecuteAction : Action
{
    [JsonPropertyName("type")]
    public string Type { get; } = "Action.Execute";

    [JsonPropertyName("id")]
    public string? Id { get; set; }

    [JsonPropertyName("requires")]
    public HostCapabilities? Requires { get; set; }

    [JsonPropertyName("title")]
    public string? Title { get; set; }

    [JsonPropertyName("iconUrl")]
    public string? IconUrl { get; set; }

    [JsonPropertyName("style")]
    public ActionStyle? Style { get; set; }

    [JsonPropertyName("mode")]
    public ActionMode? Mode { get; set; }

    [JsonPropertyName("tooltip")]
    public string? Tooltip { get; set; }

    [JsonPropertyName("isEnabled")]
    public bool? IsEnabled { get; set; }

    [JsonPropertyName("data")]
    public SubmitActionData? Data { get; set; }

    [JsonPropertyName("associatedInputs")]
    public AssociatedInputs? AssociatedInputs { get; set; }

    [JsonPropertyName("conditionallyEnabled")]
    public bool? ConditionallyEnabled { get; set; }

    [JsonPropertyName("verb")]
    public string? Verb { get; set; }

    [JsonPropertyName("fallback")]
    public IUnion<Action, FallbackAction>? Fallback { get; set; }

    public ExecuteAction WithId(string value)
    {
        this.Id = value;
        return this;
    }

    public ExecuteAction WithRequires(HostCapabilities value)
    {
        this.Requires = value;
        return this;
    }

    public ExecuteAction WithTitle(string value)
    {
        this.Title = value;
        return this;
    }

    public ExecuteAction WithIconUrl(string value)
    {
        this.IconUrl = value;
        return this;
    }

    public ExecuteAction WithStyle(ActionStyle value)
    {
        this.Style = value;
        return this;
    }

    public ExecuteAction WithMode(ActionMode value)
    {
        this.Mode = value;
        return this;
    }

    public ExecuteAction WithTooltip(string value)
    {
        this.Tooltip = value;
        return this;
    }

    public ExecuteAction WithIsEnabled(bool value)
    {
        this.IsEnabled = value;
        return this;
    }

    public ExecuteAction WithData(SubmitActionData value)
    {
        this.Data = value;
        return this;
    }

    public ExecuteAction WithAssociatedInputs(AssociatedInputs value)
    {
        this.AssociatedInputs = value;
        return this;
    }

    public ExecuteAction WithConditionallyEnabled(bool value)
    {
        this.ConditionallyEnabled = value;
        return this;
    }

    public ExecuteAction WithVerb(string value)
    {
        this.Verb = value;
        return this;
    }

    public ExecuteAction WithFallback(IUnion<Action, FallbackAction> value)
    {
        this.Fallback = value;
        return this;
    }
}

public class SubmitActionData : SerializableObject
{
    [JsonPropertyName("msTeams")]
    public MsTeamsSubmitActionData? MsTeams { get; set; }

    public SubmitActionData WithMsTeams(MsTeamsSubmitActionData value)
    {
        this.MsTeams = value;
        return this;
    }
    [JsonExtensionData]
    public IDictionary<string, object?> NonSchemaProperties { get; set; } = new Dictionary<string, object?>();
}

public class MsTeamsSubmitActionData : SerializableObject
{
    [JsonExtensionData]
    public IDictionary<string, object?> NonSchemaProperties { get; set; } = new Dictionary<string, object?>();
}

public class SubmitAction : Action
{
    [JsonPropertyName("type")]
    public string Type { get; } = "Action.Submit";

    [JsonPropertyName("id")]
    public string? Id { get; set; }

    [JsonPropertyName("requires")]
    public HostCapabilities? Requires { get; set; }

    [JsonPropertyName("title")]
    public string? Title { get; set; }

    [JsonPropertyName("iconUrl")]
    public string? IconUrl { get; set; }

    [JsonPropertyName("style")]
    public ActionStyle? Style { get; set; }

    [JsonPropertyName("mode")]
    public ActionMode? Mode { get; set; }

    [JsonPropertyName("tooltip")]
    public string? Tooltip { get; set; }

    [JsonPropertyName("isEnabled")]
    public bool? IsEnabled { get; set; }

    [JsonPropertyName("data")]
    public SubmitActionData? Data { get; set; }

    [JsonPropertyName("associatedInputs")]
    public AssociatedInputs? AssociatedInputs { get; set; }

    [JsonPropertyName("conditionallyEnabled")]
    public bool? ConditionallyEnabled { get; set; }

    [JsonPropertyName("msTeams")]
    public TeamsSubmitActionProperties? MsTeams { get; set; }

    [JsonPropertyName("fallback")]
    public IUnion<Action, FallbackAction>? Fallback { get; set; }

    public SubmitAction WithId(string value)
    {
        this.Id = value;
        return this;
    }

    public SubmitAction WithRequires(HostCapabilities value)
    {
        this.Requires = value;
        return this;
    }

    public SubmitAction WithTitle(string value)
    {
        this.Title = value;
        return this;
    }

    public SubmitAction WithIconUrl(string value)
    {
        this.IconUrl = value;
        return this;
    }

    public SubmitAction WithStyle(ActionStyle value)
    {
        this.Style = value;
        return this;
    }

    public SubmitAction WithMode(ActionMode value)
    {
        this.Mode = value;
        return this;
    }

    public SubmitAction WithTooltip(string value)
    {
        this.Tooltip = value;
        return this;
    }

    public SubmitAction WithIsEnabled(bool value)
    {
        this.IsEnabled = value;
        return this;
    }

    public SubmitAction WithData(SubmitActionData value)
    {
        this.Data = value;
        return this;
    }

    public SubmitAction WithAssociatedInputs(AssociatedInputs value)
    {
        this.AssociatedInputs = value;
        return this;
    }

    public SubmitAction WithConditionallyEnabled(bool value)
    {
        this.ConditionallyEnabled = value;
        return this;
    }

    public SubmitAction WithMsTeams(TeamsSubmitActionProperties value)
    {
        this.MsTeams = value;
        return this;
    }

    public SubmitAction WithFallback(IUnion<Action, FallbackAction> value)
    {
        this.Fallback = value;
        return this;
    }
}

public class TeamsSubmitActionProperties : SerializableObject
{
    [JsonPropertyName("feedback")]
    public TeamsSubmitActionFeedback? Feedback { get; set; }

    public TeamsSubmitActionProperties WithFeedback(TeamsSubmitActionFeedback value)
    {
        this.Feedback = value;
        return this;
    }
}

public class TeamsSubmitActionFeedback : SerializableObject
{
    [JsonPropertyName("hide")]
    public bool? Hide { get; set; }

    public TeamsSubmitActionFeedback WithHide(bool value)
    {
        this.Hide = value;
        return this;
    }
}

public class OpenUrlAction : Action
{
    [JsonPropertyName("type")]
    public string Type { get; } = "Action.OpenUrl";

    [JsonPropertyName("id")]
    public string? Id { get; set; }

    [JsonPropertyName("requires")]
    public HostCapabilities? Requires { get; set; }

    [JsonPropertyName("title")]
    public string? Title { get; set; }

    [JsonPropertyName("iconUrl")]
    public string? IconUrl { get; set; }

    [JsonPropertyName("style")]
    public ActionStyle? Style { get; set; }

    [JsonPropertyName("mode")]
    public ActionMode? Mode { get; set; }

    [JsonPropertyName("tooltip")]
    public string? Tooltip { get; set; }

    [JsonPropertyName("isEnabled")]
    public bool? IsEnabled { get; set; }

    [JsonPropertyName("url")]
    public string? Url { get; set; }

    [JsonPropertyName("fallback")]
    public IUnion<Action, FallbackAction>? Fallback { get; set; }

    public OpenUrlAction(string url)
    {
        this.Url = url;
    }

    public OpenUrlAction WithId(string value)
    {
        this.Id = value;
        return this;
    }

    public OpenUrlAction WithRequires(HostCapabilities value)
    {
        this.Requires = value;
        return this;
    }

    public OpenUrlAction WithTitle(string value)
    {
        this.Title = value;
        return this;
    }

    public OpenUrlAction WithIconUrl(string value)
    {
        this.IconUrl = value;
        return this;
    }

    public OpenUrlAction WithStyle(ActionStyle value)
    {
        this.Style = value;
        return this;
    }

    public OpenUrlAction WithMode(ActionMode value)
    {
        this.Mode = value;
        return this;
    }

    public OpenUrlAction WithTooltip(string value)
    {
        this.Tooltip = value;
        return this;
    }

    public OpenUrlAction WithIsEnabled(bool value)
    {
        this.IsEnabled = value;
        return this;
    }

    public OpenUrlAction WithUrl(string value)
    {
        this.Url = value;
        return this;
    }

    public OpenUrlAction WithFallback(IUnion<Action, FallbackAction> value)
    {
        this.Fallback = value;
        return this;
    }
}

public class ToggleVisibilityAction : Action
{
    [JsonPropertyName("type")]
    public string Type { get; } = "Action.ToggleVisibility";

    [JsonPropertyName("id")]
    public string? Id { get; set; }

    [JsonPropertyName("requires")]
    public HostCapabilities? Requires { get; set; }

    [JsonPropertyName("title")]
    public string? Title { get; set; }

    [JsonPropertyName("iconUrl")]
    public string? IconUrl { get; set; }

    [JsonPropertyName("style")]
    public ActionStyle? Style { get; set; }

    [JsonPropertyName("mode")]
    public ActionMode? Mode { get; set; }

    [JsonPropertyName("tooltip")]
    public string? Tooltip { get; set; }

    [JsonPropertyName("isEnabled")]
    public bool? IsEnabled { get; set; }

    [JsonPropertyName("targetElements")]
    public IUnion<IList<string>, IList<TargetElement>>? TargetElements { get; set; }

    [JsonPropertyName("fallback")]
    public IUnion<Action, FallbackAction>? Fallback { get; set; }

    public ToggleVisibilityAction WithId(string value)
    {
        this.Id = value;
        return this;
    }

    public ToggleVisibilityAction WithRequires(HostCapabilities value)
    {
        this.Requires = value;
        return this;
    }

    public ToggleVisibilityAction WithTitle(string value)
    {
        this.Title = value;
        return this;
    }

    public ToggleVisibilityAction WithIconUrl(string value)
    {
        this.IconUrl = value;
        return this;
    }

    public ToggleVisibilityAction WithStyle(ActionStyle value)
    {
        this.Style = value;
        return this;
    }

    public ToggleVisibilityAction WithMode(ActionMode value)
    {
        this.Mode = value;
        return this;
    }

    public ToggleVisibilityAction WithTooltip(string value)
    {
        this.Tooltip = value;
        return this;
    }

    public ToggleVisibilityAction WithIsEnabled(bool value)
    {
        this.IsEnabled = value;
        return this;
    }

    public ToggleVisibilityAction WithTargetElements(IUnion<IList<string>, IList<TargetElement>> value)
    {
        this.TargetElements = value;
        return this;
    }

    public ToggleVisibilityAction WithFallback(IUnion<Action, FallbackAction> value)
    {
        this.Fallback = value;
        return this;
    }
}

public class TargetElement : SerializableObject
{
    [JsonPropertyName("elementId")]
    public string? ElementId { get; set; }

    [JsonPropertyName("isVisible")]
    public bool? IsVisible { get; set; }

    public TargetElement WithElementId(string value)
    {
        this.ElementId = value;
        return this;
    }

    public TargetElement WithIsVisible(bool value)
    {
        this.IsVisible = value;
        return this;
    }
}

public class ShowCardAction : Action
{
    [JsonPropertyName("type")]
    public string Type { get; } = "Action.ShowCard";

    [JsonPropertyName("id")]
    public string? Id { get; set; }

    [JsonPropertyName("requires")]
    public HostCapabilities? Requires { get; set; }

    [JsonPropertyName("title")]
    public string? Title { get; set; }

    [JsonPropertyName("iconUrl")]
    public string? IconUrl { get; set; }

    [JsonPropertyName("style")]
    public ActionStyle? Style { get; set; }

    [JsonPropertyName("mode")]
    public ActionMode? Mode { get; set; }

    [JsonPropertyName("tooltip")]
    public string? Tooltip { get; set; }

    [JsonPropertyName("isEnabled")]
    public bool? IsEnabled { get; set; }

    [JsonPropertyName("fallback")]
    public IUnion<Action, FallbackAction>? Fallback { get; set; }

    [JsonPropertyName("card")]
    public AdaptiveCard? Card { get; set; }

    public ShowCardAction WithId(string value)
    {
        this.Id = value;
        return this;
    }

    public ShowCardAction WithRequires(HostCapabilities value)
    {
        this.Requires = value;
        return this;
    }

    public ShowCardAction WithTitle(string value)
    {
        this.Title = value;
        return this;
    }

    public ShowCardAction WithIconUrl(string value)
    {
        this.IconUrl = value;
        return this;
    }

    public ShowCardAction WithStyle(ActionStyle value)
    {
        this.Style = value;
        return this;
    }

    public ShowCardAction WithMode(ActionMode value)
    {
        this.Mode = value;
        return this;
    }

    public ShowCardAction WithTooltip(string value)
    {
        this.Tooltip = value;
        return this;
    }

    public ShowCardAction WithIsEnabled(bool value)
    {
        this.IsEnabled = value;
        return this;
    }

    public ShowCardAction WithFallback(IUnion<Action, FallbackAction> value)
    {
        this.Fallback = value;
        return this;
    }

    public ShowCardAction WithCard(AdaptiveCard value)
    {
        this.Card = value;
        return this;
    }
}

public class ResetInputsAction : Action
{
    [JsonPropertyName("type")]
    public string Type { get; } = "Action.ResetInputs";

    [JsonPropertyName("id")]
    public string? Id { get; set; }

    [JsonPropertyName("requires")]
    public HostCapabilities? Requires { get; set; }

    [JsonPropertyName("title")]
    public string? Title { get; set; }

    [JsonPropertyName("iconUrl")]
    public string? IconUrl { get; set; }

    [JsonPropertyName("style")]
    public ActionStyle? Style { get; set; }

    [JsonPropertyName("mode")]
    public ActionMode? Mode { get; set; }

    [JsonPropertyName("tooltip")]
    public string? Tooltip { get; set; }

    [JsonPropertyName("isEnabled")]
    public bool? IsEnabled { get; set; }

    [JsonPropertyName("targetInputIds")]
    public IList<string>? TargetInputIds { get; set; }

    [JsonPropertyName("fallback")]
    public IUnion<Action, FallbackAction>? Fallback { get; set; }

    public ResetInputsAction WithId(string value)
    {
        this.Id = value;
        return this;
    }

    public ResetInputsAction WithRequires(HostCapabilities value)
    {
        this.Requires = value;
        return this;
    }

    public ResetInputsAction WithTitle(string value)
    {
        this.Title = value;
        return this;
    }

    public ResetInputsAction WithIconUrl(string value)
    {
        this.IconUrl = value;
        return this;
    }

    public ResetInputsAction WithStyle(ActionStyle value)
    {
        this.Style = value;
        return this;
    }

    public ResetInputsAction WithMode(ActionMode value)
    {
        this.Mode = value;
        return this;
    }

    public ResetInputsAction WithTooltip(string value)
    {
        this.Tooltip = value;
        return this;
    }

    public ResetInputsAction WithIsEnabled(bool value)
    {
        this.IsEnabled = value;
        return this;
    }

    public ResetInputsAction WithTargetInputIds(params IList<string> value)
    {
        this.TargetInputIds = value;
        return this;
    }

    public ResetInputsAction WithFallback(IUnion<Action, FallbackAction> value)
    {
        this.Fallback = value;
        return this;
    }
}

public class StackLayout : ContainerLayout
{
    [JsonPropertyName("type")]
    public string Type { get; } = "Layout.Stack";

    [JsonPropertyName("targetWidth")]
    public TargetWidth? TargetWidth { get; set; }

    public StackLayout WithTargetWidth(TargetWidth value)
    {
        this.TargetWidth = value;
        return this;
    }
}

public class FlowLayout : ContainerLayout
{
    [JsonPropertyName("type")]
    public string Type { get; } = "Layout.Flow";

    [JsonPropertyName("targetWidth")]
    public TargetWidth? TargetWidth { get; set; }

    [JsonPropertyName("horizontalItemsAlignment")]
    public HorizontalAlignment? HorizontalItemsAlignment { get; set; }

    [JsonPropertyName("verticalItemsAlignment")]
    public VerticalAlignment? VerticalItemsAlignment { get; set; }

    [JsonPropertyName("itemFit")]
    public FlowLayoutItemFit? ItemFit { get; set; }

    [JsonPropertyName("minItemWidth")]
    public string? MinItemWidth { get; set; }

    [JsonPropertyName("maxItemWidth")]
    public string? MaxItemWidth { get; set; }

    [JsonPropertyName("itemWidth")]
    public string? ItemWidth { get; set; }

    [JsonPropertyName("columnSpacing")]
    public Spacing? ColumnSpacing { get; set; }

    [JsonPropertyName("rowSpacing")]
    public Spacing? RowSpacing { get; set; }

    public FlowLayout WithTargetWidth(TargetWidth value)
    {
        this.TargetWidth = value;
        return this;
    }

    public FlowLayout WithHorizontalItemsAlignment(HorizontalAlignment value)
    {
        this.HorizontalItemsAlignment = value;
        return this;
    }

    public FlowLayout WithVerticalItemsAlignment(VerticalAlignment value)
    {
        this.VerticalItemsAlignment = value;
        return this;
    }

    public FlowLayout WithItemFit(FlowLayoutItemFit value)
    {
        this.ItemFit = value;
        return this;
    }

    public FlowLayout WithMinItemWidth(string value)
    {
        this.MinItemWidth = value;
        return this;
    }

    public FlowLayout WithMaxItemWidth(string value)
    {
        this.MaxItemWidth = value;
        return this;
    }

    public FlowLayout WithItemWidth(string value)
    {
        this.ItemWidth = value;
        return this;
    }

    public FlowLayout WithColumnSpacing(Spacing value)
    {
        this.ColumnSpacing = value;
        return this;
    }

    public FlowLayout WithRowSpacing(Spacing value)
    {
        this.RowSpacing = value;
        return this;
    }
}

public class AreaGridLayout : ContainerLayout
{
    [JsonPropertyName("type")]
    public string Type { get; } = "Layout.AreaGrid";

    [JsonPropertyName("targetWidth")]
    public TargetWidth? TargetWidth { get; set; }

    [JsonPropertyName("columns")]
    public IUnion<IList<float>, IList<string>>? Columns { get; set; }

    [JsonPropertyName("areas")]
    public IList<GridArea>? Areas { get; set; }

    [JsonPropertyName("columnSpacing")]
    public Spacing? ColumnSpacing { get; set; }

    [JsonPropertyName("rowSpacing")]
    public Spacing? RowSpacing { get; set; }

    public AreaGridLayout WithTargetWidth(TargetWidth value)
    {
        this.TargetWidth = value;
        return this;
    }

    public AreaGridLayout WithColumns(IUnion<IList<float>, IList<string>> value)
    {
        this.Columns = value;
        return this;
    }

    public AreaGridLayout WithAreas(params IList<GridArea> value)
    {
        this.Areas = value;
        return this;
    }

    public AreaGridLayout WithColumnSpacing(Spacing value)
    {
        this.ColumnSpacing = value;
        return this;
    }

    public AreaGridLayout WithRowSpacing(Spacing value)
    {
        this.RowSpacing = value;
        return this;
    }
}

public class GridArea : SerializableObject
{
    [JsonPropertyName("name")]
    public string? Name { get; set; }

    [JsonPropertyName("column")]
    public float? Column { get; set; }

    [JsonPropertyName("columnSpan")]
    public float? ColumnSpan { get; set; }

    [JsonPropertyName("row")]
    public float? Row { get; set; }

    [JsonPropertyName("rowSpan")]
    public float? RowSpan { get; set; }

    public GridArea WithName(string value)
    {
        this.Name = value;
        return this;
    }

    public GridArea WithColumn(float value)
    {
        this.Column = value;
        return this;
    }

    public GridArea WithColumnSpan(float value)
    {
        this.ColumnSpan = value;
        return this;
    }

    public GridArea WithRow(float value)
    {
        this.Row = value;
        return this;
    }

    public GridArea WithRowSpan(float value)
    {
        this.RowSpan = value;
        return this;
    }
}

public class BackgroundImage : SerializableObject
{
    [JsonPropertyName("url")]
    public string? Url { get; set; }

    [JsonPropertyName("fillMode")]
    public FillMode? FillMode { get; set; }

    [JsonPropertyName("horizontalAlignment")]
    public HorizontalAlignment? HorizontalAlignment { get; set; }

    [JsonPropertyName("verticalAlignment")]
    public VerticalAlignment? VerticalAlignment { get; set; }

    public BackgroundImage WithUrl(string value)
    {
        this.Url = value;
        return this;
    }

    public BackgroundImage WithFillMode(FillMode value)
    {
        this.FillMode = value;
        return this;
    }

    public BackgroundImage WithHorizontalAlignment(HorizontalAlignment value)
    {
        this.HorizontalAlignment = value;
        return this;
    }

    public BackgroundImage WithVerticalAlignment(VerticalAlignment value)
    {
        this.VerticalAlignment = value;
        return this;
    }
}

public class RefreshDefinition : SerializableObject
{
    [JsonPropertyName("action")]
    public ExecuteAction? Action { get; set; }

    [JsonPropertyName("userIds")]
    public IList<string>? UserIds { get; set; }

    public RefreshDefinition WithAction(ExecuteAction value)
    {
        this.Action = value;
        return this;
    }

    public RefreshDefinition WithUserIds(params IList<string> value)
    {
        this.UserIds = value;
        return this;
    }
}

public class Authentication : SerializableObject
{
    [JsonPropertyName("text")]
    public string? Text { get; set; }

    [JsonPropertyName("connectionName")]
    public string? ConnectionName { get; set; }

    [JsonPropertyName("buttons")]
    public IList<AuthCardButton>? Buttons { get; set; }

    [JsonPropertyName("tokenExchangeResource")]
    public TokenExchangeResource? TokenExchangeResource { get; set; }

    public Authentication WithText(string value)
    {
        this.Text = value;
        return this;
    }

    public Authentication WithConnectionName(string value)
    {
        this.ConnectionName = value;
        return this;
    }

    public Authentication WithButtons(params IList<AuthCardButton> value)
    {
        this.Buttons = value;
        return this;
    }

    public Authentication WithTokenExchangeResource(TokenExchangeResource value)
    {
        this.TokenExchangeResource = value;
        return this;
    }
}

public class AuthCardButton : SerializableObject
{
    [JsonPropertyName("type")]
    public string? Type { get; set; }

    [JsonPropertyName("title")]
    public string? Title { get; set; }

    [JsonPropertyName("image")]
    public string? Image { get; set; }

    [JsonPropertyName("value")]
    public string? Value { get; set; }

    public AuthCardButton WithType(string value)
    {
        this.Type = value;
        return this;
    }

    public AuthCardButton WithTitle(string value)
    {
        this.Title = value;
        return this;
    }

    public AuthCardButton WithImage(string value)
    {
        this.Image = value;
        return this;
    }

    public AuthCardButton WithValue(string value)
    {
        this.Value = value;
        return this;
    }
}

public class TokenExchangeResource : SerializableObject
{
    [JsonPropertyName("id")]
    public string? Id { get; set; }

    [JsonPropertyName("uri")]
    public string? Uri { get; set; }

    [JsonPropertyName("providerId")]
    public string? ProviderId { get; set; }

    public TokenExchangeResource WithId(string value)
    {
        this.Id = value;
        return this;
    }

    public TokenExchangeResource WithUri(string value)
    {
        this.Uri = value;
        return this;
    }

    public TokenExchangeResource WithProviderId(string value)
    {
        this.ProviderId = value;
        return this;
    }
}

public class TeamsCardProperties : SerializableObject
{
    [JsonPropertyName("width")]
    public TeamsCardWidth? Width { get; set; }

    [JsonPropertyName("entities")]
    public IList<Mention>? Entities { get; set; }

    public TeamsCardProperties WithWidth(TeamsCardWidth value)
    {
        this.Width = value;
        return this;
    }

    public TeamsCardProperties WithEntities(params IList<Mention> value)
    {
        this.Entities = value;
        return this;
    }
}

public class Mention : SerializableObject
{
    [JsonPropertyName("type")]
    public string Type { get; } = "mention";

    [JsonPropertyName("text")]
    public string? Text { get; set; }

    [JsonPropertyName("mentioned")]
    public MentionedEntity? Mentioned { get; set; }

    public Mention WithText(string value)
    {
        this.Text = value;
        return this;
    }

    public Mention WithMentioned(MentionedEntity value)
    {
        this.Mentioned = value;
        return this;
    }
}

public class MentionedEntity : SerializableObject
{
    [JsonPropertyName("id")]
    public string? Id { get; set; }

    [JsonPropertyName("name")]
    public string? Name { get; set; }

    [JsonPropertyName("mentionType")]
    public MentionType? MentionType { get; set; }

    public MentionedEntity WithId(string value)
    {
        this.Id = value;
        return this;
    }

    public MentionedEntity WithName(string value)
    {
        this.Name = value;
        return this;
    }

    public MentionedEntity WithMentionType(MentionType value)
    {
        this.MentionType = value;
        return this;
    }
}

public class CardMetadata : SerializableObject
{
    [JsonPropertyName("webUrl")]
    public string? WebUrl { get; set; }

    public CardMetadata WithWebUrl(string value)
    {
        this.WebUrl = value;
        return this;
    }
}

public class Container : CardElement
{
    [JsonPropertyName("type")]
    public string Type { get; } = "Container";

    [JsonPropertyName("id")]
    public string? Id { get; set; }

    [JsonPropertyName("requires")]
    public HostCapabilities? Requires { get; set; }

    [JsonPropertyName("lang")]
    public string? Lang { get; set; }

    [JsonPropertyName("isVisible")]
    public bool? IsVisible { get; set; }

    [JsonPropertyName("separator")]
    public bool? Separator { get; set; }

    [JsonPropertyName("height")]
    public ElementHeight? Height { get; set; }

    [JsonPropertyName("horizontalAlignment")]
    public HorizontalAlignment? HorizontalAlignment { get; set; }

    [JsonPropertyName("spacing")]
    public Spacing? Spacing { get; set; }

    [JsonPropertyName("targetWidth")]
    public TargetWidth? TargetWidth { get; set; }

    [JsonPropertyName("isSortKey")]
    public bool? IsSortKey { get; set; }

    [JsonPropertyName("selectAction")]
    public Action? SelectAction { get; set; }

    [JsonPropertyName("style")]
    public ContainerStyle? Style { get; set; }

    [JsonPropertyName("showBorder")]
    public bool? ShowBorder { get; set; }

    [JsonPropertyName("roundedCorners")]
    public bool? RoundedCorners { get; set; }

    [JsonPropertyName("layouts")]
    public IList<ContainerLayout>? Layouts { get; set; }

    [JsonPropertyName("bleed")]
    public bool? Bleed { get; set; }

    [JsonPropertyName("minHeight")]
    public string? MinHeight { get; set; }

    [JsonPropertyName("backgroundImage")]
    public IUnion<string, BackgroundImage>? BackgroundImage { get; set; }

    [JsonPropertyName("verticalContentAlignment")]
    public VerticalAlignment? VerticalContentAlignment { get; set; }

    [JsonPropertyName("rtl")]
    public bool? Rtl { get; set; }

    [JsonPropertyName("maxHeight")]
    public string? MaxHeight { get; set; }

    [JsonPropertyName("grid.area")]
    public string? GridArea { get; set; }

    [JsonPropertyName("fallback")]
    public IUnion<CardElement, FallbackElement>? Fallback { get; set; }

    [JsonPropertyName("items")]
    public IList<CardElement>? Items { get; set; }

    public Container(params IList<CardElement> items)
    {
        this.Items = items;
    }

    public Container WithId(string value)
    {
        this.Id = value;
        return this;
    }

    public Container WithRequires(HostCapabilities value)
    {
        this.Requires = value;
        return this;
    }

    public Container WithLang(string value)
    {
        this.Lang = value;
        return this;
    }

    public Container WithIsVisible(bool value)
    {
        this.IsVisible = value;
        return this;
    }

    public Container WithSeparator(bool value)
    {
        this.Separator = value;
        return this;
    }

    public Container WithHeight(ElementHeight value)
    {
        this.Height = value;
        return this;
    }

    public Container WithHorizontalAlignment(HorizontalAlignment value)
    {
        this.HorizontalAlignment = value;
        return this;
    }

    public Container WithSpacing(Spacing value)
    {
        this.Spacing = value;
        return this;
    }

    public Container WithTargetWidth(TargetWidth value)
    {
        this.TargetWidth = value;
        return this;
    }

    public Container WithIsSortKey(bool value)
    {
        this.IsSortKey = value;
        return this;
    }

    public Container WithSelectAction(Action value)
    {
        this.SelectAction = value;
        return this;
    }

    public Container WithStyle(ContainerStyle value)
    {
        this.Style = value;
        return this;
    }

    public Container WithShowBorder(bool value)
    {
        this.ShowBorder = value;
        return this;
    }

    public Container WithRoundedCorners(bool value)
    {
        this.RoundedCorners = value;
        return this;
    }

    public Container WithLayouts(params IList<ContainerLayout> value)
    {
        this.Layouts = value;
        return this;
    }

    public Container WithBleed(bool value)
    {
        this.Bleed = value;
        return this;
    }

    public Container WithMinHeight(string value)
    {
        this.MinHeight = value;
        return this;
    }

    public Container WithBackgroundImage(IUnion<string, BackgroundImage> value)
    {
        this.BackgroundImage = value;
        return this;
    }

    public Container WithVerticalContentAlignment(VerticalAlignment value)
    {
        this.VerticalContentAlignment = value;
        return this;
    }

    public Container WithRtl(bool value)
    {
        this.Rtl = value;
        return this;
    }

    public Container WithMaxHeight(string value)
    {
        this.MaxHeight = value;
        return this;
    }

    public Container WithGridArea(string value)
    {
        this.GridArea = value;
        return this;
    }

    public Container WithFallback(IUnion<CardElement, FallbackElement> value)
    {
        this.Fallback = value;
        return this;
    }

    public Container WithItems(params IList<CardElement> value)
    {
        this.Items = value;
        return this;
    }
}

public class ActionSet : CardElement
{
    [JsonPropertyName("type")]
    public string Type { get; } = "ActionSet";

    [JsonPropertyName("id")]
    public string? Id { get; set; }

    [JsonPropertyName("requires")]
    public HostCapabilities? Requires { get; set; }

    [JsonPropertyName("lang")]
    public string? Lang { get; set; }

    [JsonPropertyName("isVisible")]
    public bool? IsVisible { get; set; }

    [JsonPropertyName("separator")]
    public bool? Separator { get; set; }

    [JsonPropertyName("height")]
    public ElementHeight? Height { get; set; }

    [JsonPropertyName("horizontalAlignment")]
    public HorizontalAlignment? HorizontalAlignment { get; set; }

    [JsonPropertyName("spacing")]
    public Spacing? Spacing { get; set; }

    [JsonPropertyName("targetWidth")]
    public TargetWidth? TargetWidth { get; set; }

    [JsonPropertyName("isSortKey")]
    public bool? IsSortKey { get; set; }

    [JsonPropertyName("grid.area")]
    public string? GridArea { get; set; }

    [JsonPropertyName("fallback")]
    public IUnion<CardElement, FallbackElement>? Fallback { get; set; }

    [JsonPropertyName("actions")]
    public IList<Action>? Actions { get; set; }

    public ActionSet(params IList<Action> actions)
    {
        this.Actions = actions;
    }

    public ActionSet WithId(string value)
    {
        this.Id = value;
        return this;
    }

    public ActionSet WithRequires(HostCapabilities value)
    {
        this.Requires = value;
        return this;
    }

    public ActionSet WithLang(string value)
    {
        this.Lang = value;
        return this;
    }

    public ActionSet WithIsVisible(bool value)
    {
        this.IsVisible = value;
        return this;
    }

    public ActionSet WithSeparator(bool value)
    {
        this.Separator = value;
        return this;
    }

    public ActionSet WithHeight(ElementHeight value)
    {
        this.Height = value;
        return this;
    }

    public ActionSet WithHorizontalAlignment(HorizontalAlignment value)
    {
        this.HorizontalAlignment = value;
        return this;
    }

    public ActionSet WithSpacing(Spacing value)
    {
        this.Spacing = value;
        return this;
    }

    public ActionSet WithTargetWidth(TargetWidth value)
    {
        this.TargetWidth = value;
        return this;
    }

    public ActionSet WithIsSortKey(bool value)
    {
        this.IsSortKey = value;
        return this;
    }

    public ActionSet WithGridArea(string value)
    {
        this.GridArea = value;
        return this;
    }

    public ActionSet WithFallback(IUnion<CardElement, FallbackElement> value)
    {
        this.Fallback = value;
        return this;
    }

    public ActionSet WithActions(params IList<Action> value)
    {
        this.Actions = value;
        return this;
    }
}

public class ColumnSet : CardElement
{
    [JsonPropertyName("type")]
    public string Type { get; } = "ColumnSet";

    [JsonPropertyName("id")]
    public string? Id { get; set; }

    [JsonPropertyName("requires")]
    public HostCapabilities? Requires { get; set; }

    [JsonPropertyName("lang")]
    public string? Lang { get; set; }

    [JsonPropertyName("isVisible")]
    public bool? IsVisible { get; set; }

    [JsonPropertyName("separator")]
    public bool? Separator { get; set; }

    [JsonPropertyName("height")]
    public ElementHeight? Height { get; set; }

    [JsonPropertyName("horizontalAlignment")]
    public HorizontalAlignment? HorizontalAlignment { get; set; }

    [JsonPropertyName("spacing")]
    public Spacing? Spacing { get; set; }

    [JsonPropertyName("targetWidth")]
    public TargetWidth? TargetWidth { get; set; }

    [JsonPropertyName("isSortKey")]
    public bool? IsSortKey { get; set; }

    [JsonPropertyName("selectAction")]
    public Action? SelectAction { get; set; }

    [JsonPropertyName("style")]
    public ContainerStyle? Style { get; set; }

    [JsonPropertyName("showBorder")]
    public bool? ShowBorder { get; set; }

    [JsonPropertyName("roundedCorners")]
    public bool? RoundedCorners { get; set; }

    [JsonPropertyName("bleed")]
    public bool? Bleed { get; set; }

    [JsonPropertyName("minHeight")]
    public string? MinHeight { get; set; }

    [JsonPropertyName("grid.area")]
    public string? GridArea { get; set; }

    [JsonPropertyName("fallback")]
    public IUnion<CardElement, FallbackElement>? Fallback { get; set; }

    [JsonPropertyName("columns")]
    public IList<Column>? Columns { get; set; }

    public ColumnSet WithId(string value)
    {
        this.Id = value;
        return this;
    }

    public ColumnSet WithRequires(HostCapabilities value)
    {
        this.Requires = value;
        return this;
    }

    public ColumnSet WithLang(string value)
    {
        this.Lang = value;
        return this;
    }

    public ColumnSet WithIsVisible(bool value)
    {
        this.IsVisible = value;
        return this;
    }

    public ColumnSet WithSeparator(bool value)
    {
        this.Separator = value;
        return this;
    }

    public ColumnSet WithHeight(ElementHeight value)
    {
        this.Height = value;
        return this;
    }

    public ColumnSet WithHorizontalAlignment(HorizontalAlignment value)
    {
        this.HorizontalAlignment = value;
        return this;
    }

    public ColumnSet WithSpacing(Spacing value)
    {
        this.Spacing = value;
        return this;
    }

    public ColumnSet WithTargetWidth(TargetWidth value)
    {
        this.TargetWidth = value;
        return this;
    }

    public ColumnSet WithIsSortKey(bool value)
    {
        this.IsSortKey = value;
        return this;
    }

    public ColumnSet WithSelectAction(Action value)
    {
        this.SelectAction = value;
        return this;
    }

    public ColumnSet WithStyle(ContainerStyle value)
    {
        this.Style = value;
        return this;
    }

    public ColumnSet WithShowBorder(bool value)
    {
        this.ShowBorder = value;
        return this;
    }

    public ColumnSet WithRoundedCorners(bool value)
    {
        this.RoundedCorners = value;
        return this;
    }

    public ColumnSet WithBleed(bool value)
    {
        this.Bleed = value;
        return this;
    }

    public ColumnSet WithMinHeight(string value)
    {
        this.MinHeight = value;
        return this;
    }

    public ColumnSet WithGridArea(string value)
    {
        this.GridArea = value;
        return this;
    }

    public ColumnSet WithFallback(IUnion<CardElement, FallbackElement> value)
    {
        this.Fallback = value;
        return this;
    }

    public ColumnSet WithColumns(params IList<Column> value)
    {
        this.Columns = value;
        return this;
    }
}

public class Media : CardElement
{
    [JsonPropertyName("type")]
    public string Type { get; } = "Media";

    [JsonPropertyName("id")]
    public string? Id { get; set; }

    [JsonPropertyName("requires")]
    public HostCapabilities? Requires { get; set; }

    [JsonPropertyName("lang")]
    public string? Lang { get; set; }

    [JsonPropertyName("isVisible")]
    public bool? IsVisible { get; set; }

    [JsonPropertyName("separator")]
    public bool? Separator { get; set; }

    [JsonPropertyName("height")]
    public ElementHeight? Height { get; set; }

    [JsonPropertyName("spacing")]
    public Spacing? Spacing { get; set; }

    [JsonPropertyName("targetWidth")]
    public TargetWidth? TargetWidth { get; set; }

    [JsonPropertyName("isSortKey")]
    public bool? IsSortKey { get; set; }

    [JsonPropertyName("sources")]
    public IList<MediaSource>? Sources { get; set; }

    [JsonPropertyName("captionSources")]
    public IList<CaptionSource>? CaptionSources { get; set; }

    [JsonPropertyName("poster")]
    public string? Poster { get; set; }

    [JsonPropertyName("altText")]
    public string? AltText { get; set; }

    [JsonPropertyName("grid.area")]
    public string? GridArea { get; set; }

    [JsonPropertyName("fallback")]
    public IUnion<CardElement, FallbackElement>? Fallback { get; set; }

    public Media WithId(string value)
    {
        this.Id = value;
        return this;
    }

    public Media WithRequires(HostCapabilities value)
    {
        this.Requires = value;
        return this;
    }

    public Media WithLang(string value)
    {
        this.Lang = value;
        return this;
    }

    public Media WithIsVisible(bool value)
    {
        this.IsVisible = value;
        return this;
    }

    public Media WithSeparator(bool value)
    {
        this.Separator = value;
        return this;
    }

    public Media WithHeight(ElementHeight value)
    {
        this.Height = value;
        return this;
    }

    public Media WithSpacing(Spacing value)
    {
        this.Spacing = value;
        return this;
    }

    public Media WithTargetWidth(TargetWidth value)
    {
        this.TargetWidth = value;
        return this;
    }

    public Media WithIsSortKey(bool value)
    {
        this.IsSortKey = value;
        return this;
    }

    public Media WithSources(params IList<MediaSource> value)
    {
        this.Sources = value;
        return this;
    }

    public Media WithCaptionSources(params IList<CaptionSource> value)
    {
        this.CaptionSources = value;
        return this;
    }

    public Media WithPoster(string value)
    {
        this.Poster = value;
        return this;
    }

    public Media WithAltText(string value)
    {
        this.AltText = value;
        return this;
    }

    public Media WithGridArea(string value)
    {
        this.GridArea = value;
        return this;
    }

    public Media WithFallback(IUnion<CardElement, FallbackElement> value)
    {
        this.Fallback = value;
        return this;
    }
}

public class MediaSource : SerializableObject
{
    [JsonPropertyName("mimeType")]
    public string? MimeType { get; set; }

    [JsonPropertyName("url")]
    public string? Url { get; set; }

    public MediaSource WithMimeType(string value)
    {
        this.MimeType = value;
        return this;
    }

    public MediaSource WithUrl(string value)
    {
        this.Url = value;
        return this;
    }
}

public class CaptionSource : SerializableObject
{
    [JsonPropertyName("mimeType")]
    public string? MimeType { get; set; }

    [JsonPropertyName("url")]
    public string? Url { get; set; }

    [JsonPropertyName("label")]
    public string? Label { get; set; }

    public CaptionSource WithMimeType(string value)
    {
        this.MimeType = value;
        return this;
    }

    public CaptionSource WithUrl(string value)
    {
        this.Url = value;
        return this;
    }

    public CaptionSource WithLabel(string value)
    {
        this.Label = value;
        return this;
    }
}

public class RichTextBlock : CardElement
{
    [JsonPropertyName("type")]
    public string Type { get; } = "RichTextBlock";

    [JsonPropertyName("id")]
    public string? Id { get; set; }

    [JsonPropertyName("requires")]
    public HostCapabilities? Requires { get; set; }

    [JsonPropertyName("lang")]
    public string? Lang { get; set; }

    [JsonPropertyName("isVisible")]
    public bool? IsVisible { get; set; }

    [JsonPropertyName("separator")]
    public bool? Separator { get; set; }

    [JsonPropertyName("height")]
    public ElementHeight? Height { get; set; }

    [JsonPropertyName("horizontalAlignment")]
    public HorizontalAlignment? HorizontalAlignment { get; set; }

    [JsonPropertyName("spacing")]
    public Spacing? Spacing { get; set; }

    [JsonPropertyName("targetWidth")]
    public TargetWidth? TargetWidth { get; set; }

    [JsonPropertyName("isSortKey")]
    public bool? IsSortKey { get; set; }

    [JsonPropertyName("grid.area")]
    public string? GridArea { get; set; }

    [JsonPropertyName("fallback")]
    public IUnion<CardElement, FallbackElement>? Fallback { get; set; }

    [JsonPropertyName("inlines")]
    public IUnion<IList<TextRun>, IList<string>>? Inlines { get; set; }

    public RichTextBlock WithId(string value)
    {
        this.Id = value;
        return this;
    }

    public RichTextBlock WithRequires(HostCapabilities value)
    {
        this.Requires = value;
        return this;
    }

    public RichTextBlock WithLang(string value)
    {
        this.Lang = value;
        return this;
    }

    public RichTextBlock WithIsVisible(bool value)
    {
        this.IsVisible = value;
        return this;
    }

    public RichTextBlock WithSeparator(bool value)
    {
        this.Separator = value;
        return this;
    }

    public RichTextBlock WithHeight(ElementHeight value)
    {
        this.Height = value;
        return this;
    }

    public RichTextBlock WithHorizontalAlignment(HorizontalAlignment value)
    {
        this.HorizontalAlignment = value;
        return this;
    }

    public RichTextBlock WithSpacing(Spacing value)
    {
        this.Spacing = value;
        return this;
    }

    public RichTextBlock WithTargetWidth(TargetWidth value)
    {
        this.TargetWidth = value;
        return this;
    }

    public RichTextBlock WithIsSortKey(bool value)
    {
        this.IsSortKey = value;
        return this;
    }

    public RichTextBlock WithGridArea(string value)
    {
        this.GridArea = value;
        return this;
    }

    public RichTextBlock WithFallback(IUnion<CardElement, FallbackElement> value)
    {
        this.Fallback = value;
        return this;
    }

    public RichTextBlock WithInlines(IUnion<IList<TextRun>, IList<string>> value)
    {
        this.Inlines = value;
        return this;
    }
}

public class Table : CardElement
{
    [JsonPropertyName("type")]
    public string Type { get; } = "Table";

    [JsonPropertyName("id")]
    public string? Id { get; set; }

    [JsonPropertyName("requires")]
    public HostCapabilities? Requires { get; set; }

    [JsonPropertyName("lang")]
    public string? Lang { get; set; }

    [JsonPropertyName("isVisible")]
    public bool? IsVisible { get; set; }

    [JsonPropertyName("separator")]
    public bool? Separator { get; set; }

    [JsonPropertyName("height")]
    public ElementHeight? Height { get; set; }

    [JsonPropertyName("horizontalAlignment")]
    public HorizontalAlignment? HorizontalAlignment { get; set; }

    [JsonPropertyName("spacing")]
    public Spacing? Spacing { get; set; }

    [JsonPropertyName("targetWidth")]
    public TargetWidth? TargetWidth { get; set; }

    [JsonPropertyName("isSortKey")]
    public bool? IsSortKey { get; set; }

    [JsonPropertyName("style")]
    public ContainerStyle? Style { get; set; }

    [JsonPropertyName("showBorder")]
    public bool? ShowBorder { get; set; }

    [JsonPropertyName("roundedCorners")]
    public bool? RoundedCorners { get; set; }

    [JsonPropertyName("columns")]
    public IList<ColumnDefinition>? Columns { get; set; }

    [JsonPropertyName("firstRowAsHeaders")]
    public bool? FirstRowAsHeaders { get; set; }

    [JsonPropertyName("showGridLines")]
    public bool? ShowGridLines { get; set; }

    [JsonPropertyName("gridStyle")]
    public ContainerStyle? GridStyle { get; set; }

    [JsonPropertyName("horizontalCellContentAlignment")]
    public HorizontalAlignment? HorizontalCellContentAlignment { get; set; }

    [JsonPropertyName("verticalCellContentAlignment")]
    public VerticalAlignment? VerticalCellContentAlignment { get; set; }

    [JsonPropertyName("grid.area")]
    public string? GridArea { get; set; }

    [JsonPropertyName("fallback")]
    public IUnion<CardElement, FallbackElement>? Fallback { get; set; }

    [JsonPropertyName("rows")]
    public IList<TableRow>? Rows { get; set; }

    public Table WithId(string value)
    {
        this.Id = value;
        return this;
    }

    public Table WithRequires(HostCapabilities value)
    {
        this.Requires = value;
        return this;
    }

    public Table WithLang(string value)
    {
        this.Lang = value;
        return this;
    }

    public Table WithIsVisible(bool value)
    {
        this.IsVisible = value;
        return this;
    }

    public Table WithSeparator(bool value)
    {
        this.Separator = value;
        return this;
    }

    public Table WithHeight(ElementHeight value)
    {
        this.Height = value;
        return this;
    }

    public Table WithHorizontalAlignment(HorizontalAlignment value)
    {
        this.HorizontalAlignment = value;
        return this;
    }

    public Table WithSpacing(Spacing value)
    {
        this.Spacing = value;
        return this;
    }

    public Table WithTargetWidth(TargetWidth value)
    {
        this.TargetWidth = value;
        return this;
    }

    public Table WithIsSortKey(bool value)
    {
        this.IsSortKey = value;
        return this;
    }

    public Table WithStyle(ContainerStyle value)
    {
        this.Style = value;
        return this;
    }

    public Table WithShowBorder(bool value)
    {
        this.ShowBorder = value;
        return this;
    }

    public Table WithRoundedCorners(bool value)
    {
        this.RoundedCorners = value;
        return this;
    }

    public Table WithColumns(params IList<ColumnDefinition> value)
    {
        this.Columns = value;
        return this;
    }

    public Table WithFirstRowAsHeaders(bool value)
    {
        this.FirstRowAsHeaders = value;
        return this;
    }

    public Table WithShowGridLines(bool value)
    {
        this.ShowGridLines = value;
        return this;
    }

    public Table WithGridStyle(ContainerStyle value)
    {
        this.GridStyle = value;
        return this;
    }

    public Table WithHorizontalCellContentAlignment(HorizontalAlignment value)
    {
        this.HorizontalCellContentAlignment = value;
        return this;
    }

    public Table WithVerticalCellContentAlignment(VerticalAlignment value)
    {
        this.VerticalCellContentAlignment = value;
        return this;
    }

    public Table WithGridArea(string value)
    {
        this.GridArea = value;
        return this;
    }

    public Table WithFallback(IUnion<CardElement, FallbackElement> value)
    {
        this.Fallback = value;
        return this;
    }

    public Table WithRows(params IList<TableRow> value)
    {
        this.Rows = value;
        return this;
    }
}

public class ColumnDefinition : SerializableObject
{
    [JsonPropertyName("horizontalCellContentAlignment")]
    public HorizontalAlignment? HorizontalCellContentAlignment { get; set; }

    [JsonPropertyName("verticalCellContentAlignment")]
    public VerticalAlignment? VerticalCellContentAlignment { get; set; }

    [JsonPropertyName("width")]
    public IUnion<string, float>? Width { get; set; }

    public ColumnDefinition WithHorizontalCellContentAlignment(HorizontalAlignment value)
    {
        this.HorizontalCellContentAlignment = value;
        return this;
    }

    public ColumnDefinition WithVerticalCellContentAlignment(VerticalAlignment value)
    {
        this.VerticalCellContentAlignment = value;
        return this;
    }

    public ColumnDefinition WithWidth(IUnion<string, float> value)
    {
        this.Width = value;
        return this;
    }
}

public class TextBlock : CardElement
{
    [JsonPropertyName("type")]
    public string Type { get; } = "TextBlock";

    [JsonPropertyName("id")]
    public string? Id { get; set; }

    [JsonPropertyName("requires")]
    public HostCapabilities? Requires { get; set; }

    [JsonPropertyName("lang")]
    public string? Lang { get; set; }

    [JsonPropertyName("isVisible")]
    public bool? IsVisible { get; set; }

    [JsonPropertyName("separator")]
    public bool? Separator { get; set; }

    [JsonPropertyName("height")]
    public ElementHeight? Height { get; set; }

    [JsonPropertyName("horizontalAlignment")]
    public HorizontalAlignment? HorizontalAlignment { get; set; }

    [JsonPropertyName("spacing")]
    public Spacing? Spacing { get; set; }

    [JsonPropertyName("targetWidth")]
    public TargetWidth? TargetWidth { get; set; }

    [JsonPropertyName("isSortKey")]
    public bool? IsSortKey { get; set; }

    [JsonPropertyName("text")]
    public string? Text { get; set; }

    [JsonPropertyName("size")]
    public TextSize? Size { get; set; }

    [JsonPropertyName("weight")]
    public TextWeight? Weight { get; set; }

    [JsonPropertyName("color")]
    public TextColor? Color { get; set; }

    [JsonPropertyName("isSubtle")]
    public bool? IsSubtle { get; set; }

    [JsonPropertyName("fontType")]
    public FontType? FontType { get; set; }

    [JsonPropertyName("wrap")]
    public bool? Wrap { get; set; }

    [JsonPropertyName("maxLines")]
    public float? MaxLines { get; set; }

    [JsonPropertyName("style")]
    public StyleEnum? Style { get; set; }

    [JsonPropertyName("grid.area")]
    public string? GridArea { get; set; }

    [JsonPropertyName("fallback")]
    public IUnion<CardElement, FallbackElement>? Fallback { get; set; }

    public TextBlock(string text)
    {
        this.Text = text;
    }

    public TextBlock WithId(string value)
    {
        this.Id = value;
        return this;
    }

    public TextBlock WithRequires(HostCapabilities value)
    {
        this.Requires = value;
        return this;
    }

    public TextBlock WithLang(string value)
    {
        this.Lang = value;
        return this;
    }

    public TextBlock WithIsVisible(bool value)
    {
        this.IsVisible = value;
        return this;
    }

    public TextBlock WithSeparator(bool value)
    {
        this.Separator = value;
        return this;
    }

    public TextBlock WithHeight(ElementHeight value)
    {
        this.Height = value;
        return this;
    }

    public TextBlock WithHorizontalAlignment(HorizontalAlignment value)
    {
        this.HorizontalAlignment = value;
        return this;
    }

    public TextBlock WithSpacing(Spacing value)
    {
        this.Spacing = value;
        return this;
    }

    public TextBlock WithTargetWidth(TargetWidth value)
    {
        this.TargetWidth = value;
        return this;
    }

    public TextBlock WithIsSortKey(bool value)
    {
        this.IsSortKey = value;
        return this;
    }

    public TextBlock WithText(string value)
    {
        this.Text = value;
        return this;
    }

    public TextBlock WithSize(TextSize value)
    {
        this.Size = value;
        return this;
    }

    public TextBlock WithWeight(TextWeight value)
    {
        this.Weight = value;
        return this;
    }

    public TextBlock WithColor(TextColor value)
    {
        this.Color = value;
        return this;
    }

    public TextBlock WithIsSubtle(bool value)
    {
        this.IsSubtle = value;
        return this;
    }

    public TextBlock WithFontType(FontType value)
    {
        this.FontType = value;
        return this;
    }

    public TextBlock WithWrap(bool value)
    {
        this.Wrap = value;
        return this;
    }

    public TextBlock WithMaxLines(float value)
    {
        this.MaxLines = value;
        return this;
    }

    public TextBlock WithStyle(StyleEnum value)
    {
        this.Style = value;
        return this;
    }

    public TextBlock WithGridArea(string value)
    {
        this.GridArea = value;
        return this;
    }

    public TextBlock WithFallback(IUnion<CardElement, FallbackElement> value)
    {
        this.Fallback = value;
        return this;
    }
}

public class FactSet : CardElement
{
    [JsonPropertyName("type")]
    public string Type { get; } = "FactSet";

    [JsonPropertyName("id")]
    public string? Id { get; set; }

    [JsonPropertyName("requires")]
    public HostCapabilities? Requires { get; set; }

    [JsonPropertyName("lang")]
    public string? Lang { get; set; }

    [JsonPropertyName("isVisible")]
    public bool? IsVisible { get; set; }

    [JsonPropertyName("separator")]
    public bool? Separator { get; set; }

    [JsonPropertyName("height")]
    public ElementHeight? Height { get; set; }

    [JsonPropertyName("spacing")]
    public Spacing? Spacing { get; set; }

    [JsonPropertyName("targetWidth")]
    public TargetWidth? TargetWidth { get; set; }

    [JsonPropertyName("isSortKey")]
    public bool? IsSortKey { get; set; }

    [JsonPropertyName("facts")]
    public IList<Fact>? Facts { get; set; }

    [JsonPropertyName("grid.area")]
    public string? GridArea { get; set; }

    [JsonPropertyName("fallback")]
    public IUnion<CardElement, FallbackElement>? Fallback { get; set; }

    public FactSet(params IList<Fact> facts)
    {
        this.Facts = facts;
    }

    public FactSet WithId(string value)
    {
        this.Id = value;
        return this;
    }

    public FactSet WithRequires(HostCapabilities value)
    {
        this.Requires = value;
        return this;
    }

    public FactSet WithLang(string value)
    {
        this.Lang = value;
        return this;
    }

    public FactSet WithIsVisible(bool value)
    {
        this.IsVisible = value;
        return this;
    }

    public FactSet WithSeparator(bool value)
    {
        this.Separator = value;
        return this;
    }

    public FactSet WithHeight(ElementHeight value)
    {
        this.Height = value;
        return this;
    }

    public FactSet WithSpacing(Spacing value)
    {
        this.Spacing = value;
        return this;
    }

    public FactSet WithTargetWidth(TargetWidth value)
    {
        this.TargetWidth = value;
        return this;
    }

    public FactSet WithIsSortKey(bool value)
    {
        this.IsSortKey = value;
        return this;
    }

    public FactSet WithFacts(params IList<Fact> value)
    {
        this.Facts = value;
        return this;
    }

    public FactSet WithGridArea(string value)
    {
        this.GridArea = value;
        return this;
    }

    public FactSet WithFallback(IUnion<CardElement, FallbackElement> value)
    {
        this.Fallback = value;
        return this;
    }
}

public class Fact : SerializableObject
{
    [JsonPropertyName("title")]
    public string? Title { get; set; }

    [JsonPropertyName("value")]
    public string? Value { get; set; }

    public Fact(string title, string value)
    {
        this.Title = title;
        this.Value = value;
    }

    public Fact WithTitle(string value)
    {
        this.Title = value;
        return this;
    }

    public Fact WithValue(string value)
    {
        this.Value = value;
        return this;
    }
}

public class ImageSet : CardElement
{
    [JsonPropertyName("type")]
    public string Type { get; } = "ImageSet";

    [JsonPropertyName("id")]
    public string? Id { get; set; }

    [JsonPropertyName("requires")]
    public HostCapabilities? Requires { get; set; }

    [JsonPropertyName("lang")]
    public string? Lang { get; set; }

    [JsonPropertyName("isVisible")]
    public bool? IsVisible { get; set; }

    [JsonPropertyName("separator")]
    public bool? Separator { get; set; }

    [JsonPropertyName("height")]
    public ElementHeight? Height { get; set; }

    [JsonPropertyName("horizontalAlignment")]
    public HorizontalAlignment? HorizontalAlignment { get; set; }

    [JsonPropertyName("spacing")]
    public Spacing? Spacing { get; set; }

    [JsonPropertyName("targetWidth")]
    public TargetWidth? TargetWidth { get; set; }

    [JsonPropertyName("isSortKey")]
    public bool? IsSortKey { get; set; }

    [JsonPropertyName("images")]
    public IList<Image>? Images { get; set; }

    [JsonPropertyName("imageSize")]
    public ImageSize? ImageSize { get; set; }

    [JsonPropertyName("grid.area")]
    public string? GridArea { get; set; }

    [JsonPropertyName("fallback")]
    public IUnion<CardElement, FallbackElement>? Fallback { get; set; }

    public ImageSet(params IList<Image> images)
    {
        this.Images = images;
    }

    public ImageSet WithId(string value)
    {
        this.Id = value;
        return this;
    }

    public ImageSet WithRequires(HostCapabilities value)
    {
        this.Requires = value;
        return this;
    }

    public ImageSet WithLang(string value)
    {
        this.Lang = value;
        return this;
    }

    public ImageSet WithIsVisible(bool value)
    {
        this.IsVisible = value;
        return this;
    }

    public ImageSet WithSeparator(bool value)
    {
        this.Separator = value;
        return this;
    }

    public ImageSet WithHeight(ElementHeight value)
    {
        this.Height = value;
        return this;
    }

    public ImageSet WithHorizontalAlignment(HorizontalAlignment value)
    {
        this.HorizontalAlignment = value;
        return this;
    }

    public ImageSet WithSpacing(Spacing value)
    {
        this.Spacing = value;
        return this;
    }

    public ImageSet WithTargetWidth(TargetWidth value)
    {
        this.TargetWidth = value;
        return this;
    }

    public ImageSet WithIsSortKey(bool value)
    {
        this.IsSortKey = value;
        return this;
    }

    public ImageSet WithImages(params IList<Image> value)
    {
        this.Images = value;
        return this;
    }

    public ImageSet WithImageSize(ImageSize value)
    {
        this.ImageSize = value;
        return this;
    }

    public ImageSet WithGridArea(string value)
    {
        this.GridArea = value;
        return this;
    }

    public ImageSet WithFallback(IUnion<CardElement, FallbackElement> value)
    {
        this.Fallback = value;
        return this;
    }
}

public class Image : CardElement
{
    [JsonPropertyName("type")]
    public string Type { get; } = "Image";

    [JsonPropertyName("id")]
    public string? Id { get; set; }

    [JsonPropertyName("requires")]
    public HostCapabilities? Requires { get; set; }

    [JsonPropertyName("lang")]
    public string? Lang { get; set; }

    [JsonPropertyName("isVisible")]
    public bool? IsVisible { get; set; }

    [JsonPropertyName("separator")]
    public bool? Separator { get; set; }

    [JsonPropertyName("horizontalAlignment")]
    public HorizontalAlignment? HorizontalAlignment { get; set; }

    [JsonPropertyName("spacing")]
    public Spacing? Spacing { get; set; }

    [JsonPropertyName("targetWidth")]
    public TargetWidth? TargetWidth { get; set; }

    [JsonPropertyName("isSortKey")]
    public bool? IsSortKey { get; set; }

    [JsonPropertyName("url")]
    public string? Url { get; set; }

    [JsonPropertyName("altText")]
    public string? AltText { get; set; }

    [JsonPropertyName("backgroundColor")]
    public string? BackgroundColor { get; set; }

    [JsonPropertyName("style")]
    public ImageStyle? Style { get; set; }

    [JsonPropertyName("size")]
    public Size? Size { get; set; }

    [JsonPropertyName("width")]
    public string? Width { get; set; }

    [JsonPropertyName("selectAction")]
    public Action? SelectAction { get; set; }

    [JsonPropertyName("allowExpand")]
    public bool? AllowExpand { get; set; }

    [JsonPropertyName("msTeams")]
    public TeamsImageProperties? MsTeams { get; set; }

    [JsonPropertyName("height")]
    public string? Height { get; set; }

    [JsonPropertyName("grid.area")]
    public string? GridArea { get; set; }

    [JsonPropertyName("fallback")]
    public IUnion<CardElement, FallbackElement>? Fallback { get; set; }

    public Image(string url)
    {
        this.Url = url;
    }

    public Image WithId(string value)
    {
        this.Id = value;
        return this;
    }

    public Image WithRequires(HostCapabilities value)
    {
        this.Requires = value;
        return this;
    }

    public Image WithLang(string value)
    {
        this.Lang = value;
        return this;
    }

    public Image WithIsVisible(bool value)
    {
        this.IsVisible = value;
        return this;
    }

    public Image WithSeparator(bool value)
    {
        this.Separator = value;
        return this;
    }

    public Image WithHorizontalAlignment(HorizontalAlignment value)
    {
        this.HorizontalAlignment = value;
        return this;
    }

    public Image WithSpacing(Spacing value)
    {
        this.Spacing = value;
        return this;
    }

    public Image WithTargetWidth(TargetWidth value)
    {
        this.TargetWidth = value;
        return this;
    }

    public Image WithIsSortKey(bool value)
    {
        this.IsSortKey = value;
        return this;
    }

    public Image WithUrl(string value)
    {
        this.Url = value;
        return this;
    }

    public Image WithAltText(string value)
    {
        this.AltText = value;
        return this;
    }

    public Image WithBackgroundColor(string value)
    {
        this.BackgroundColor = value;
        return this;
    }

    public Image WithStyle(ImageStyle value)
    {
        this.Style = value;
        return this;
    }

    public Image WithSize(Size value)
    {
        this.Size = value;
        return this;
    }

    public Image WithWidth(string value)
    {
        this.Width = value;
        return this;
    }

    public Image WithSelectAction(Action value)
    {
        this.SelectAction = value;
        return this;
    }

    public Image WithAllowExpand(bool value)
    {
        this.AllowExpand = value;
        return this;
    }

    public Image WithMsTeams(TeamsImageProperties value)
    {
        this.MsTeams = value;
        return this;
    }

    public Image WithHeight(string value)
    {
        this.Height = value;
        return this;
    }

    public Image WithGridArea(string value)
    {
        this.GridArea = value;
        return this;
    }

    public Image WithFallback(IUnion<CardElement, FallbackElement> value)
    {
        this.Fallback = value;
        return this;
    }
}

public class TeamsImageProperties : SerializableObject
{
    [JsonPropertyName("allowExpand")]
    public bool? AllowExpand { get; set; }

    public TeamsImageProperties WithAllowExpand(bool value)
    {
        this.AllowExpand = value;
        return this;
    }
}

public class TextInput : CardElement
{
    [JsonPropertyName("type")]
    public string Type { get; } = "Input.Text";

    [JsonPropertyName("id")]
    public string? Id { get; set; }

    [JsonPropertyName("requires")]
    public HostCapabilities? Requires { get; set; }

    [JsonPropertyName("lang")]
    public string? Lang { get; set; }

    [JsonPropertyName("isVisible")]
    public bool? IsVisible { get; set; }

    [JsonPropertyName("separator")]
    public bool? Separator { get; set; }

    [JsonPropertyName("height")]
    public ElementHeight? Height { get; set; }

    [JsonPropertyName("spacing")]
    public Spacing? Spacing { get; set; }

    [JsonPropertyName("targetWidth")]
    public TargetWidth? TargetWidth { get; set; }

    [JsonPropertyName("isSortKey")]
    public bool? IsSortKey { get; set; }

    [JsonPropertyName("label")]
    public string? Label { get; set; }

    [JsonPropertyName("isRequired")]
    public bool? IsRequired { get; set; }

    [JsonPropertyName("errorMessage")]
    public string? ErrorMessage { get; set; }

    [JsonPropertyName("valueChangedAction")]
    public ResetInputsAction? ValueChangedAction { get; set; }

    [JsonPropertyName("value")]
    public string? Value { get; set; }

    [JsonPropertyName("maxLength")]
    public float? MaxLength { get; set; }

    [JsonPropertyName("isMultiline")]
    public bool? IsMultiline { get; set; }

    [JsonPropertyName("placeholder")]
    public string? Placeholder { get; set; }

    [JsonPropertyName("style")]
    public InputTextStyle? Style { get; set; }

    [JsonPropertyName("inlineAction")]
    public Action? InlineAction { get; set; }

    [JsonPropertyName("regex")]
    public string? Regex { get; set; }

    [JsonPropertyName("grid.area")]
    public string? GridArea { get; set; }

    [JsonPropertyName("fallback")]
    public IUnion<CardElement, FallbackElement>? Fallback { get; set; }

    public TextInput WithId(string value)
    {
        this.Id = value;
        return this;
    }

    public TextInput WithRequires(HostCapabilities value)
    {
        this.Requires = value;
        return this;
    }

    public TextInput WithLang(string value)
    {
        this.Lang = value;
        return this;
    }

    public TextInput WithIsVisible(bool value)
    {
        this.IsVisible = value;
        return this;
    }

    public TextInput WithSeparator(bool value)
    {
        this.Separator = value;
        return this;
    }

    public TextInput WithHeight(ElementHeight value)
    {
        this.Height = value;
        return this;
    }

    public TextInput WithSpacing(Spacing value)
    {
        this.Spacing = value;
        return this;
    }

    public TextInput WithTargetWidth(TargetWidth value)
    {
        this.TargetWidth = value;
        return this;
    }

    public TextInput WithIsSortKey(bool value)
    {
        this.IsSortKey = value;
        return this;
    }

    public TextInput WithLabel(string value)
    {
        this.Label = value;
        return this;
    }

    public TextInput WithIsRequired(bool value)
    {
        this.IsRequired = value;
        return this;
    }

    public TextInput WithErrorMessage(string value)
    {
        this.ErrorMessage = value;
        return this;
    }

    public TextInput WithValueChangedAction(ResetInputsAction value)
    {
        this.ValueChangedAction = value;
        return this;
    }

    public TextInput WithValue(string value)
    {
        this.Value = value;
        return this;
    }

    public TextInput WithMaxLength(float value)
    {
        this.MaxLength = value;
        return this;
    }

    public TextInput WithIsMultiline(bool value)
    {
        this.IsMultiline = value;
        return this;
    }

    public TextInput WithPlaceholder(string value)
    {
        this.Placeholder = value;
        return this;
    }

    public TextInput WithStyle(InputTextStyle value)
    {
        this.Style = value;
        return this;
    }

    public TextInput WithInlineAction(Action value)
    {
        this.InlineAction = value;
        return this;
    }

    public TextInput WithRegex(string value)
    {
        this.Regex = value;
        return this;
    }

    public TextInput WithGridArea(string value)
    {
        this.GridArea = value;
        return this;
    }

    public TextInput WithFallback(IUnion<CardElement, FallbackElement> value)
    {
        this.Fallback = value;
        return this;
    }
}

public class DateInput : CardElement
{
    [JsonPropertyName("type")]
    public string Type { get; } = "Input.Date";

    [JsonPropertyName("id")]
    public string? Id { get; set; }

    [JsonPropertyName("requires")]
    public HostCapabilities? Requires { get; set; }

    [JsonPropertyName("lang")]
    public string? Lang { get; set; }

    [JsonPropertyName("isVisible")]
    public bool? IsVisible { get; set; }

    [JsonPropertyName("separator")]
    public bool? Separator { get; set; }

    [JsonPropertyName("height")]
    public ElementHeight? Height { get; set; }

    [JsonPropertyName("spacing")]
    public Spacing? Spacing { get; set; }

    [JsonPropertyName("targetWidth")]
    public TargetWidth? TargetWidth { get; set; }

    [JsonPropertyName("isSortKey")]
    public bool? IsSortKey { get; set; }

    [JsonPropertyName("label")]
    public string? Label { get; set; }

    [JsonPropertyName("isRequired")]
    public bool? IsRequired { get; set; }

    [JsonPropertyName("errorMessage")]
    public string? ErrorMessage { get; set; }

    [JsonPropertyName("valueChangedAction")]
    public ResetInputsAction? ValueChangedAction { get; set; }

    [JsonPropertyName("value")]
    public string? Value { get; set; }

    [JsonPropertyName("placeholder")]
    public string? Placeholder { get; set; }

    [JsonPropertyName("min")]
    public string? Min { get; set; }

    [JsonPropertyName("max")]
    public string? Max { get; set; }

    [JsonPropertyName("grid.area")]
    public string? GridArea { get; set; }

    [JsonPropertyName("fallback")]
    public IUnion<CardElement, FallbackElement>? Fallback { get; set; }

    public DateInput WithId(string value)
    {
        this.Id = value;
        return this;
    }

    public DateInput WithRequires(HostCapabilities value)
    {
        this.Requires = value;
        return this;
    }

    public DateInput WithLang(string value)
    {
        this.Lang = value;
        return this;
    }

    public DateInput WithIsVisible(bool value)
    {
        this.IsVisible = value;
        return this;
    }

    public DateInput WithSeparator(bool value)
    {
        this.Separator = value;
        return this;
    }

    public DateInput WithHeight(ElementHeight value)
    {
        this.Height = value;
        return this;
    }

    public DateInput WithSpacing(Spacing value)
    {
        this.Spacing = value;
        return this;
    }

    public DateInput WithTargetWidth(TargetWidth value)
    {
        this.TargetWidth = value;
        return this;
    }

    public DateInput WithIsSortKey(bool value)
    {
        this.IsSortKey = value;
        return this;
    }

    public DateInput WithLabel(string value)
    {
        this.Label = value;
        return this;
    }

    public DateInput WithIsRequired(bool value)
    {
        this.IsRequired = value;
        return this;
    }

    public DateInput WithErrorMessage(string value)
    {
        this.ErrorMessage = value;
        return this;
    }

    public DateInput WithValueChangedAction(ResetInputsAction value)
    {
        this.ValueChangedAction = value;
        return this;
    }

    public DateInput WithValue(string value)
    {
        this.Value = value;
        return this;
    }

    public DateInput WithPlaceholder(string value)
    {
        this.Placeholder = value;
        return this;
    }

    public DateInput WithMin(string value)
    {
        this.Min = value;
        return this;
    }

    public DateInput WithMax(string value)
    {
        this.Max = value;
        return this;
    }

    public DateInput WithGridArea(string value)
    {
        this.GridArea = value;
        return this;
    }

    public DateInput WithFallback(IUnion<CardElement, FallbackElement> value)
    {
        this.Fallback = value;
        return this;
    }
}

public class TimeInput : CardElement
{
    [JsonPropertyName("type")]
    public string Type { get; } = "Input.Time";

    [JsonPropertyName("id")]
    public string? Id { get; set; }

    [JsonPropertyName("requires")]
    public HostCapabilities? Requires { get; set; }

    [JsonPropertyName("lang")]
    public string? Lang { get; set; }

    [JsonPropertyName("isVisible")]
    public bool? IsVisible { get; set; }

    [JsonPropertyName("separator")]
    public bool? Separator { get; set; }

    [JsonPropertyName("height")]
    public ElementHeight? Height { get; set; }

    [JsonPropertyName("spacing")]
    public Spacing? Spacing { get; set; }

    [JsonPropertyName("targetWidth")]
    public TargetWidth? TargetWidth { get; set; }

    [JsonPropertyName("isSortKey")]
    public bool? IsSortKey { get; set; }

    [JsonPropertyName("label")]
    public string? Label { get; set; }

    [JsonPropertyName("isRequired")]
    public bool? IsRequired { get; set; }

    [JsonPropertyName("errorMessage")]
    public string? ErrorMessage { get; set; }

    [JsonPropertyName("valueChangedAction")]
    public ResetInputsAction? ValueChangedAction { get; set; }

    [JsonPropertyName("value")]
    public string? Value { get; set; }

    [JsonPropertyName("placeholder")]
    public string? Placeholder { get; set; }

    [JsonPropertyName("min")]
    public string? Min { get; set; }

    [JsonPropertyName("max")]
    public string? Max { get; set; }

    [JsonPropertyName("grid.area")]
    public string? GridArea { get; set; }

    [JsonPropertyName("fallback")]
    public IUnion<CardElement, FallbackElement>? Fallback { get; set; }

    public TimeInput WithId(string value)
    {
        this.Id = value;
        return this;
    }

    public TimeInput WithRequires(HostCapabilities value)
    {
        this.Requires = value;
        return this;
    }

    public TimeInput WithLang(string value)
    {
        this.Lang = value;
        return this;
    }

    public TimeInput WithIsVisible(bool value)
    {
        this.IsVisible = value;
        return this;
    }

    public TimeInput WithSeparator(bool value)
    {
        this.Separator = value;
        return this;
    }

    public TimeInput WithHeight(ElementHeight value)
    {
        this.Height = value;
        return this;
    }

    public TimeInput WithSpacing(Spacing value)
    {
        this.Spacing = value;
        return this;
    }

    public TimeInput WithTargetWidth(TargetWidth value)
    {
        this.TargetWidth = value;
        return this;
    }

    public TimeInput WithIsSortKey(bool value)
    {
        this.IsSortKey = value;
        return this;
    }

    public TimeInput WithLabel(string value)
    {
        this.Label = value;
        return this;
    }

    public TimeInput WithIsRequired(bool value)
    {
        this.IsRequired = value;
        return this;
    }

    public TimeInput WithErrorMessage(string value)
    {
        this.ErrorMessage = value;
        return this;
    }

    public TimeInput WithValueChangedAction(ResetInputsAction value)
    {
        this.ValueChangedAction = value;
        return this;
    }

    public TimeInput WithValue(string value)
    {
        this.Value = value;
        return this;
    }

    public TimeInput WithPlaceholder(string value)
    {
        this.Placeholder = value;
        return this;
    }

    public TimeInput WithMin(string value)
    {
        this.Min = value;
        return this;
    }

    public TimeInput WithMax(string value)
    {
        this.Max = value;
        return this;
    }

    public TimeInput WithGridArea(string value)
    {
        this.GridArea = value;
        return this;
    }

    public TimeInput WithFallback(IUnion<CardElement, FallbackElement> value)
    {
        this.Fallback = value;
        return this;
    }
}

public class NumberInput : CardElement
{
    [JsonPropertyName("type")]
    public string Type { get; } = "Input.Number";

    [JsonPropertyName("id")]
    public string? Id { get; set; }

    [JsonPropertyName("requires")]
    public HostCapabilities? Requires { get; set; }

    [JsonPropertyName("lang")]
    public string? Lang { get; set; }

    [JsonPropertyName("isVisible")]
    public bool? IsVisible { get; set; }

    [JsonPropertyName("separator")]
    public bool? Separator { get; set; }

    [JsonPropertyName("height")]
    public ElementHeight? Height { get; set; }

    [JsonPropertyName("spacing")]
    public Spacing? Spacing { get; set; }

    [JsonPropertyName("targetWidth")]
    public TargetWidth? TargetWidth { get; set; }

    [JsonPropertyName("isSortKey")]
    public bool? IsSortKey { get; set; }

    [JsonPropertyName("label")]
    public string? Label { get; set; }

    [JsonPropertyName("isRequired")]
    public bool? IsRequired { get; set; }

    [JsonPropertyName("errorMessage")]
    public string? ErrorMessage { get; set; }

    [JsonPropertyName("valueChangedAction")]
    public ResetInputsAction? ValueChangedAction { get; set; }

    [JsonPropertyName("value")]
    public float? Value { get; set; }

    [JsonPropertyName("placeholder")]
    public string? Placeholder { get; set; }

    [JsonPropertyName("min")]
    public float? Min { get; set; }

    [JsonPropertyName("max")]
    public float? Max { get; set; }

    [JsonPropertyName("grid.area")]
    public string? GridArea { get; set; }

    [JsonPropertyName("fallback")]
    public IUnion<CardElement, FallbackElement>? Fallback { get; set; }

    public NumberInput WithId(string value)
    {
        this.Id = value;
        return this;
    }

    public NumberInput WithRequires(HostCapabilities value)
    {
        this.Requires = value;
        return this;
    }

    public NumberInput WithLang(string value)
    {
        this.Lang = value;
        return this;
    }

    public NumberInput WithIsVisible(bool value)
    {
        this.IsVisible = value;
        return this;
    }

    public NumberInput WithSeparator(bool value)
    {
        this.Separator = value;
        return this;
    }

    public NumberInput WithHeight(ElementHeight value)
    {
        this.Height = value;
        return this;
    }

    public NumberInput WithSpacing(Spacing value)
    {
        this.Spacing = value;
        return this;
    }

    public NumberInput WithTargetWidth(TargetWidth value)
    {
        this.TargetWidth = value;
        return this;
    }

    public NumberInput WithIsSortKey(bool value)
    {
        this.IsSortKey = value;
        return this;
    }

    public NumberInput WithLabel(string value)
    {
        this.Label = value;
        return this;
    }

    public NumberInput WithIsRequired(bool value)
    {
        this.IsRequired = value;
        return this;
    }

    public NumberInput WithErrorMessage(string value)
    {
        this.ErrorMessage = value;
        return this;
    }

    public NumberInput WithValueChangedAction(ResetInputsAction value)
    {
        this.ValueChangedAction = value;
        return this;
    }

    public NumberInput WithValue(float value)
    {
        this.Value = value;
        return this;
    }

    public NumberInput WithPlaceholder(string value)
    {
        this.Placeholder = value;
        return this;
    }

    public NumberInput WithMin(float value)
    {
        this.Min = value;
        return this;
    }

    public NumberInput WithMax(float value)
    {
        this.Max = value;
        return this;
    }

    public NumberInput WithGridArea(string value)
    {
        this.GridArea = value;
        return this;
    }

    public NumberInput WithFallback(IUnion<CardElement, FallbackElement> value)
    {
        this.Fallback = value;
        return this;
    }
}

public class ToggleInput : CardElement
{
    [JsonPropertyName("type")]
    public string Type { get; } = "Input.Toggle";

    [JsonPropertyName("id")]
    public string? Id { get; set; }

    [JsonPropertyName("requires")]
    public HostCapabilities? Requires { get; set; }

    [JsonPropertyName("lang")]
    public string? Lang { get; set; }

    [JsonPropertyName("isVisible")]
    public bool? IsVisible { get; set; }

    [JsonPropertyName("separator")]
    public bool? Separator { get; set; }

    [JsonPropertyName("height")]
    public ElementHeight? Height { get; set; }

    [JsonPropertyName("spacing")]
    public Spacing? Spacing { get; set; }

    [JsonPropertyName("targetWidth")]
    public TargetWidth? TargetWidth { get; set; }

    [JsonPropertyName("isSortKey")]
    public bool? IsSortKey { get; set; }

    [JsonPropertyName("label")]
    public string? Label { get; set; }

    [JsonPropertyName("isRequired")]
    public bool? IsRequired { get; set; }

    [JsonPropertyName("errorMessage")]
    public string? ErrorMessage { get; set; }

    [JsonPropertyName("valueChangedAction")]
    public ResetInputsAction? ValueChangedAction { get; set; }

    [JsonPropertyName("value")]
    public string? Value { get; set; }

    [JsonPropertyName("title")]
    public string? Title { get; set; }

    [JsonPropertyName("valueOn")]
    public string? ValueOn { get; set; }

    [JsonPropertyName("valueOff")]
    public string? ValueOff { get; set; }

    [JsonPropertyName("wrap")]
    public bool? Wrap { get; set; }

    [JsonPropertyName("grid.area")]
    public string? GridArea { get; set; }

    [JsonPropertyName("fallback")]
    public IUnion<CardElement, FallbackElement>? Fallback { get; set; }

    public ToggleInput(string title)
    {
        this.Title = title;
    }

    public ToggleInput WithId(string value)
    {
        this.Id = value;
        return this;
    }

    public ToggleInput WithRequires(HostCapabilities value)
    {
        this.Requires = value;
        return this;
    }

    public ToggleInput WithLang(string value)
    {
        this.Lang = value;
        return this;
    }

    public ToggleInput WithIsVisible(bool value)
    {
        this.IsVisible = value;
        return this;
    }

    public ToggleInput WithSeparator(bool value)
    {
        this.Separator = value;
        return this;
    }

    public ToggleInput WithHeight(ElementHeight value)
    {
        this.Height = value;
        return this;
    }

    public ToggleInput WithSpacing(Spacing value)
    {
        this.Spacing = value;
        return this;
    }

    public ToggleInput WithTargetWidth(TargetWidth value)
    {
        this.TargetWidth = value;
        return this;
    }

    public ToggleInput WithIsSortKey(bool value)
    {
        this.IsSortKey = value;
        return this;
    }

    public ToggleInput WithLabel(string value)
    {
        this.Label = value;
        return this;
    }

    public ToggleInput WithIsRequired(bool value)
    {
        this.IsRequired = value;
        return this;
    }

    public ToggleInput WithErrorMessage(string value)
    {
        this.ErrorMessage = value;
        return this;
    }

    public ToggleInput WithValueChangedAction(ResetInputsAction value)
    {
        this.ValueChangedAction = value;
        return this;
    }

    public ToggleInput WithValue(string value)
    {
        this.Value = value;
        return this;
    }

    public ToggleInput WithTitle(string value)
    {
        this.Title = value;
        return this;
    }

    public ToggleInput WithValueOn(string value)
    {
        this.ValueOn = value;
        return this;
    }

    public ToggleInput WithValueOff(string value)
    {
        this.ValueOff = value;
        return this;
    }

    public ToggleInput WithWrap(bool value)
    {
        this.Wrap = value;
        return this;
    }

    public ToggleInput WithGridArea(string value)
    {
        this.GridArea = value;
        return this;
    }

    public ToggleInput WithFallback(IUnion<CardElement, FallbackElement> value)
    {
        this.Fallback = value;
        return this;
    }
}

public class ChoiceSetInput : CardElement
{
    [JsonPropertyName("type")]
    public string Type { get; } = "Input.ChoiceSet";

    [JsonPropertyName("id")]
    public string? Id { get; set; }

    [JsonPropertyName("requires")]
    public HostCapabilities? Requires { get; set; }

    [JsonPropertyName("lang")]
    public string? Lang { get; set; }

    [JsonPropertyName("isVisible")]
    public bool? IsVisible { get; set; }

    [JsonPropertyName("separator")]
    public bool? Separator { get; set; }

    [JsonPropertyName("height")]
    public ElementHeight? Height { get; set; }

    [JsonPropertyName("spacing")]
    public Spacing? Spacing { get; set; }

    [JsonPropertyName("targetWidth")]
    public TargetWidth? TargetWidth { get; set; }

    [JsonPropertyName("isSortKey")]
    public bool? IsSortKey { get; set; }

    [JsonPropertyName("label")]
    public string? Label { get; set; }

    [JsonPropertyName("isRequired")]
    public bool? IsRequired { get; set; }

    [JsonPropertyName("errorMessage")]
    public string? ErrorMessage { get; set; }

    [JsonPropertyName("valueChangedAction")]
    public ResetInputsAction? ValueChangedAction { get; set; }

    [JsonPropertyName("value")]
    public string? Value { get; set; }

    [JsonPropertyName("choices")]
    public IList<Choice>? Choices { get; set; }

    [JsonPropertyName("choices.data")]
    public QueryData? ChoicesData { get; set; }

    [JsonPropertyName("style")]
    public StyleEnum? Style { get; set; }

    [JsonPropertyName("isMultiSelect")]
    public bool? IsMultiSelect { get; set; }

    [JsonPropertyName("placeholder")]
    public string? Placeholder { get; set; }

    [JsonPropertyName("wrap")]
    public bool? Wrap { get; set; }

    [JsonPropertyName("grid.area")]
    public string? GridArea { get; set; }

    [JsonPropertyName("fallback")]
    public IUnion<CardElement, FallbackElement>? Fallback { get; set; }

    public ChoiceSetInput(params IList<Choice> choices)
    {
        this.Choices = choices;
    }

    public ChoiceSetInput WithId(string value)
    {
        this.Id = value;
        return this;
    }

    public ChoiceSetInput WithRequires(HostCapabilities value)
    {
        this.Requires = value;
        return this;
    }

    public ChoiceSetInput WithLang(string value)
    {
        this.Lang = value;
        return this;
    }

    public ChoiceSetInput WithIsVisible(bool value)
    {
        this.IsVisible = value;
        return this;
    }

    public ChoiceSetInput WithSeparator(bool value)
    {
        this.Separator = value;
        return this;
    }

    public ChoiceSetInput WithHeight(ElementHeight value)
    {
        this.Height = value;
        return this;
    }

    public ChoiceSetInput WithSpacing(Spacing value)
    {
        this.Spacing = value;
        return this;
    }

    public ChoiceSetInput WithTargetWidth(TargetWidth value)
    {
        this.TargetWidth = value;
        return this;
    }

    public ChoiceSetInput WithIsSortKey(bool value)
    {
        this.IsSortKey = value;
        return this;
    }

    public ChoiceSetInput WithLabel(string value)
    {
        this.Label = value;
        return this;
    }

    public ChoiceSetInput WithIsRequired(bool value)
    {
        this.IsRequired = value;
        return this;
    }

    public ChoiceSetInput WithErrorMessage(string value)
    {
        this.ErrorMessage = value;
        return this;
    }

    public ChoiceSetInput WithValueChangedAction(ResetInputsAction value)
    {
        this.ValueChangedAction = value;
        return this;
    }

    public ChoiceSetInput WithValue(string value)
    {
        this.Value = value;
        return this;
    }

    public ChoiceSetInput WithChoices(params IList<Choice> value)
    {
        this.Choices = value;
        return this;
    }

    public ChoiceSetInput WithChoicesData(QueryData value)
    {
        this.ChoicesData = value;
        return this;
    }

    public ChoiceSetInput WithStyle(StyleEnum value)
    {
        this.Style = value;
        return this;
    }

    public ChoiceSetInput WithIsMultiSelect(bool value)
    {
        this.IsMultiSelect = value;
        return this;
    }

    public ChoiceSetInput WithPlaceholder(string value)
    {
        this.Placeholder = value;
        return this;
    }

    public ChoiceSetInput WithWrap(bool value)
    {
        this.Wrap = value;
        return this;
    }

    public ChoiceSetInput WithGridArea(string value)
    {
        this.GridArea = value;
        return this;
    }

    public ChoiceSetInput WithFallback(IUnion<CardElement, FallbackElement> value)
    {
        this.Fallback = value;
        return this;
    }
}

public class Choice : SerializableObject
{
    [JsonPropertyName("title")]
    public string? Title { get; set; }

    [JsonPropertyName("value")]
    public string? Value { get; set; }

    public Choice WithTitle(string value)
    {
        this.Title = value;
        return this;
    }

    public Choice WithValue(string value)
    {
        this.Value = value;
        return this;
    }
}

public class QueryData : SerializableObject
{
    [JsonPropertyName("type")]
    public string Type { get; } = "Data.Query";

    [JsonPropertyName("dataset")]
    public string? Dataset { get; set; }

    [JsonPropertyName("associatedInputs")]
    public AssociatedInputs? AssociatedInputs { get; set; }

    [JsonPropertyName("count")]
    public float? Count { get; set; }

    [JsonPropertyName("skip")]
    public float? Skip { get; set; }

    public QueryData WithDataset(string value)
    {
        this.Dataset = value;
        return this;
    }

    public QueryData WithAssociatedInputs(AssociatedInputs value)
    {
        this.AssociatedInputs = value;
        return this;
    }

    public QueryData WithCount(float value)
    {
        this.Count = value;
        return this;
    }

    public QueryData WithSkip(float value)
    {
        this.Skip = value;
        return this;
    }
}

public class RatingInput : CardElement
{
    [JsonPropertyName("type")]
    public string Type { get; } = "Input.Rating";

    [JsonPropertyName("id")]
    public string? Id { get; set; }

    [JsonPropertyName("requires")]
    public HostCapabilities? Requires { get; set; }

    [JsonPropertyName("lang")]
    public string? Lang { get; set; }

    [JsonPropertyName("isVisible")]
    public bool? IsVisible { get; set; }

    [JsonPropertyName("separator")]
    public bool? Separator { get; set; }

    [JsonPropertyName("height")]
    public ElementHeight? Height { get; set; }

    [JsonPropertyName("spacing")]
    public Spacing? Spacing { get; set; }

    [JsonPropertyName("targetWidth")]
    public TargetWidth? TargetWidth { get; set; }

    [JsonPropertyName("isSortKey")]
    public bool? IsSortKey { get; set; }

    [JsonPropertyName("label")]
    public string? Label { get; set; }

    [JsonPropertyName("isRequired")]
    public bool? IsRequired { get; set; }

    [JsonPropertyName("errorMessage")]
    public string? ErrorMessage { get; set; }

    [JsonPropertyName("valueChangedAction")]
    public ResetInputsAction? ValueChangedAction { get; set; }

    [JsonPropertyName("value")]
    public float? Value { get; set; }

    [JsonPropertyName("max")]
    public float? Max { get; set; }

    [JsonPropertyName("allowHalfSteps")]
    public bool? AllowHalfSteps { get; set; }

    [JsonPropertyName("size")]
    public RatingSize? Size { get; set; }

    [JsonPropertyName("color")]
    public RatingColor? Color { get; set; }

    [JsonPropertyName("grid.area")]
    public string? GridArea { get; set; }

    [JsonPropertyName("fallback")]
    public IUnion<CardElement, FallbackElement>? Fallback { get; set; }

    public RatingInput WithId(string value)
    {
        this.Id = value;
        return this;
    }

    public RatingInput WithRequires(HostCapabilities value)
    {
        this.Requires = value;
        return this;
    }

    public RatingInput WithLang(string value)
    {
        this.Lang = value;
        return this;
    }

    public RatingInput WithIsVisible(bool value)
    {
        this.IsVisible = value;
        return this;
    }

    public RatingInput WithSeparator(bool value)
    {
        this.Separator = value;
        return this;
    }

    public RatingInput WithHeight(ElementHeight value)
    {
        this.Height = value;
        return this;
    }

    public RatingInput WithSpacing(Spacing value)
    {
        this.Spacing = value;
        return this;
    }

    public RatingInput WithTargetWidth(TargetWidth value)
    {
        this.TargetWidth = value;
        return this;
    }

    public RatingInput WithIsSortKey(bool value)
    {
        this.IsSortKey = value;
        return this;
    }

    public RatingInput WithLabel(string value)
    {
        this.Label = value;
        return this;
    }

    public RatingInput WithIsRequired(bool value)
    {
        this.IsRequired = value;
        return this;
    }

    public RatingInput WithErrorMessage(string value)
    {
        this.ErrorMessage = value;
        return this;
    }

    public RatingInput WithValueChangedAction(ResetInputsAction value)
    {
        this.ValueChangedAction = value;
        return this;
    }

    public RatingInput WithValue(float value)
    {
        this.Value = value;
        return this;
    }

    public RatingInput WithMax(float value)
    {
        this.Max = value;
        return this;
    }

    public RatingInput WithAllowHalfSteps(bool value)
    {
        this.AllowHalfSteps = value;
        return this;
    }

    public RatingInput WithSize(RatingSize value)
    {
        this.Size = value;
        return this;
    }

    public RatingInput WithColor(RatingColor value)
    {
        this.Color = value;
        return this;
    }

    public RatingInput WithGridArea(string value)
    {
        this.GridArea = value;
        return this;
    }

    public RatingInput WithFallback(IUnion<CardElement, FallbackElement> value)
    {
        this.Fallback = value;
        return this;
    }
}

public class Rating : CardElement
{
    [JsonPropertyName("type")]
    public string Type { get; } = "Rating";

    [JsonPropertyName("id")]
    public string? Id { get; set; }

    [JsonPropertyName("requires")]
    public HostCapabilities? Requires { get; set; }

    [JsonPropertyName("lang")]
    public string? Lang { get; set; }

    [JsonPropertyName("isVisible")]
    public bool? IsVisible { get; set; }

    [JsonPropertyName("separator")]
    public bool? Separator { get; set; }

    [JsonPropertyName("height")]
    public ElementHeight? Height { get; set; }

    [JsonPropertyName("horizontalAlignment")]
    public HorizontalAlignment? HorizontalAlignment { get; set; }

    [JsonPropertyName("spacing")]
    public Spacing? Spacing { get; set; }

    [JsonPropertyName("targetWidth")]
    public TargetWidth? TargetWidth { get; set; }

    [JsonPropertyName("isSortKey")]
    public bool? IsSortKey { get; set; }

    [JsonPropertyName("value")]
    public float? Value { get; set; }

    [JsonPropertyName("count")]
    public float? Count { get; set; }

    [JsonPropertyName("max")]
    public float? Max { get; set; }

    [JsonPropertyName("size")]
    public RatingSize? Size { get; set; }

    [JsonPropertyName("color")]
    public RatingColor? Color { get; set; }

    [JsonPropertyName("style")]
    public RatingStyle? Style { get; set; }

    [JsonPropertyName("grid.area")]
    public string? GridArea { get; set; }

    [JsonPropertyName("fallback")]
    public IUnion<CardElement, FallbackElement>? Fallback { get; set; }

    public Rating WithId(string value)
    {
        this.Id = value;
        return this;
    }

    public Rating WithRequires(HostCapabilities value)
    {
        this.Requires = value;
        return this;
    }

    public Rating WithLang(string value)
    {
        this.Lang = value;
        return this;
    }

    public Rating WithIsVisible(bool value)
    {
        this.IsVisible = value;
        return this;
    }

    public Rating WithSeparator(bool value)
    {
        this.Separator = value;
        return this;
    }

    public Rating WithHeight(ElementHeight value)
    {
        this.Height = value;
        return this;
    }

    public Rating WithHorizontalAlignment(HorizontalAlignment value)
    {
        this.HorizontalAlignment = value;
        return this;
    }

    public Rating WithSpacing(Spacing value)
    {
        this.Spacing = value;
        return this;
    }

    public Rating WithTargetWidth(TargetWidth value)
    {
        this.TargetWidth = value;
        return this;
    }

    public Rating WithIsSortKey(bool value)
    {
        this.IsSortKey = value;
        return this;
    }

    public Rating WithValue(float value)
    {
        this.Value = value;
        return this;
    }

    public Rating WithCount(float value)
    {
        this.Count = value;
        return this;
    }

    public Rating WithMax(float value)
    {
        this.Max = value;
        return this;
    }

    public Rating WithSize(RatingSize value)
    {
        this.Size = value;
        return this;
    }

    public Rating WithColor(RatingColor value)
    {
        this.Color = value;
        return this;
    }

    public Rating WithStyle(RatingStyle value)
    {
        this.Style = value;
        return this;
    }

    public Rating WithGridArea(string value)
    {
        this.GridArea = value;
        return this;
    }

    public Rating WithFallback(IUnion<CardElement, FallbackElement> value)
    {
        this.Fallback = value;
        return this;
    }
}

public class CompoundButton : CardElement
{
    [JsonPropertyName("type")]
    public string Type { get; } = "CompoundButton";

    [JsonPropertyName("id")]
    public string? Id { get; set; }

    [JsonPropertyName("requires")]
    public HostCapabilities? Requires { get; set; }

    [JsonPropertyName("lang")]
    public string? Lang { get; set; }

    [JsonPropertyName("isVisible")]
    public bool? IsVisible { get; set; }

    [JsonPropertyName("separator")]
    public bool? Separator { get; set; }

    [JsonPropertyName("height")]
    public ElementHeight? Height { get; set; }

    [JsonPropertyName("horizontalAlignment")]
    public HorizontalAlignment? HorizontalAlignment { get; set; }

    [JsonPropertyName("spacing")]
    public Spacing? Spacing { get; set; }

    [JsonPropertyName("targetWidth")]
    public TargetWidth? TargetWidth { get; set; }

    [JsonPropertyName("isSortKey")]
    public bool? IsSortKey { get; set; }

    [JsonPropertyName("icon")]
    public IconInfo? Icon { get; set; }

    [JsonPropertyName("badge")]
    public string? Badge { get; set; }

    [JsonPropertyName("title")]
    public string? Title { get; set; }

    [JsonPropertyName("description")]
    public string? Description { get; set; }

    [JsonPropertyName("selectAction")]
    public Action? SelectAction { get; set; }

    [JsonPropertyName("grid.area")]
    public string? GridArea { get; set; }

    [JsonPropertyName("fallback")]
    public IUnion<CardElement, FallbackElement>? Fallback { get; set; }

    public CompoundButton WithId(string value)
    {
        this.Id = value;
        return this;
    }

    public CompoundButton WithRequires(HostCapabilities value)
    {
        this.Requires = value;
        return this;
    }

    public CompoundButton WithLang(string value)
    {
        this.Lang = value;
        return this;
    }

    public CompoundButton WithIsVisible(bool value)
    {
        this.IsVisible = value;
        return this;
    }

    public CompoundButton WithSeparator(bool value)
    {
        this.Separator = value;
        return this;
    }

    public CompoundButton WithHeight(ElementHeight value)
    {
        this.Height = value;
        return this;
    }

    public CompoundButton WithHorizontalAlignment(HorizontalAlignment value)
    {
        this.HorizontalAlignment = value;
        return this;
    }

    public CompoundButton WithSpacing(Spacing value)
    {
        this.Spacing = value;
        return this;
    }

    public CompoundButton WithTargetWidth(TargetWidth value)
    {
        this.TargetWidth = value;
        return this;
    }

    public CompoundButton WithIsSortKey(bool value)
    {
        this.IsSortKey = value;
        return this;
    }

    public CompoundButton WithIcon(IconInfo value)
    {
        this.Icon = value;
        return this;
    }

    public CompoundButton WithBadge(string value)
    {
        this.Badge = value;
        return this;
    }

    public CompoundButton WithTitle(string value)
    {
        this.Title = value;
        return this;
    }

    public CompoundButton WithDescription(string value)
    {
        this.Description = value;
        return this;
    }

    public CompoundButton WithSelectAction(Action value)
    {
        this.SelectAction = value;
        return this;
    }

    public CompoundButton WithGridArea(string value)
    {
        this.GridArea = value;
        return this;
    }

    public CompoundButton WithFallback(IUnion<CardElement, FallbackElement> value)
    {
        this.Fallback = value;
        return this;
    }
}

public class IconInfo : SerializableObject
{
    [JsonPropertyName("name")]
    public string? Name { get; set; }

    [JsonPropertyName("size")]
    public IconSize? Size { get; set; }

    [JsonPropertyName("style")]
    public IconStyle? Style { get; set; }

    [JsonPropertyName("color")]
    public TextColor? Color { get; set; }

    public IconInfo WithName(string value)
    {
        this.Name = value;
        return this;
    }

    public IconInfo WithSize(IconSize value)
    {
        this.Size = value;
        return this;
    }

    public IconInfo WithStyle(IconStyle value)
    {
        this.Style = value;
        return this;
    }

    public IconInfo WithColor(TextColor value)
    {
        this.Color = value;
        return this;
    }
}

public class Icon : CardElement
{
    [JsonPropertyName("type")]
    public string Type { get; } = "Icon";

    [JsonPropertyName("id")]
    public string? Id { get; set; }

    [JsonPropertyName("requires")]
    public HostCapabilities? Requires { get; set; }

    [JsonPropertyName("lang")]
    public string? Lang { get; set; }

    [JsonPropertyName("isVisible")]
    public bool? IsVisible { get; set; }

    [JsonPropertyName("separator")]
    public bool? Separator { get; set; }

    [JsonPropertyName("horizontalAlignment")]
    public HorizontalAlignment? HorizontalAlignment { get; set; }

    [JsonPropertyName("spacing")]
    public Spacing? Spacing { get; set; }

    [JsonPropertyName("targetWidth")]
    public TargetWidth? TargetWidth { get; set; }

    [JsonPropertyName("isSortKey")]
    public bool? IsSortKey { get; set; }

    [JsonPropertyName("name")]
    public string? Name { get; set; }

    [JsonPropertyName("size")]
    public IconSize? Size { get; set; }

    [JsonPropertyName("style")]
    public IconStyle? Style { get; set; }

    [JsonPropertyName("color")]
    public TextColor? Color { get; set; }

    [JsonPropertyName("selectAction")]
    public Action? SelectAction { get; set; }

    [JsonPropertyName("grid.area")]
    public string? GridArea { get; set; }

    [JsonPropertyName("fallback")]
    public IUnion<CardElement, FallbackElement>? Fallback { get; set; }

    public Icon(string name)
    {
        this.Name = name;
    }

    public Icon WithId(string value)
    {
        this.Id = value;
        return this;
    }

    public Icon WithRequires(HostCapabilities value)
    {
        this.Requires = value;
        return this;
    }

    public Icon WithLang(string value)
    {
        this.Lang = value;
        return this;
    }

    public Icon WithIsVisible(bool value)
    {
        this.IsVisible = value;
        return this;
    }

    public Icon WithSeparator(bool value)
    {
        this.Separator = value;
        return this;
    }

    public Icon WithHorizontalAlignment(HorizontalAlignment value)
    {
        this.HorizontalAlignment = value;
        return this;
    }

    public Icon WithSpacing(Spacing value)
    {
        this.Spacing = value;
        return this;
    }

    public Icon WithTargetWidth(TargetWidth value)
    {
        this.TargetWidth = value;
        return this;
    }

    public Icon WithIsSortKey(bool value)
    {
        this.IsSortKey = value;
        return this;
    }

    public Icon WithName(string value)
    {
        this.Name = value;
        return this;
    }

    public Icon WithSize(IconSize value)
    {
        this.Size = value;
        return this;
    }

    public Icon WithStyle(IconStyle value)
    {
        this.Style = value;
        return this;
    }

    public Icon WithColor(TextColor value)
    {
        this.Color = value;
        return this;
    }

    public Icon WithSelectAction(Action value)
    {
        this.SelectAction = value;
        return this;
    }

    public Icon WithGridArea(string value)
    {
        this.GridArea = value;
        return this;
    }

    public Icon WithFallback(IUnion<CardElement, FallbackElement> value)
    {
        this.Fallback = value;
        return this;
    }
}

public class Carousel : CardElement
{
    [JsonPropertyName("type")]
    public string Type { get; } = "Carousel";

    [JsonPropertyName("id")]
    public string? Id { get; set; }

    [JsonPropertyName("requires")]
    public HostCapabilities? Requires { get; set; }

    [JsonPropertyName("lang")]
    public string? Lang { get; set; }

    [JsonPropertyName("isVisible")]
    public bool? IsVisible { get; set; }

    [JsonPropertyName("separator")]
    public bool? Separator { get; set; }

    [JsonPropertyName("height")]
    public ElementHeight? Height { get; set; }

    [JsonPropertyName("spacing")]
    public Spacing? Spacing { get; set; }

    [JsonPropertyName("targetWidth")]
    public TargetWidth? TargetWidth { get; set; }

    [JsonPropertyName("isSortKey")]
    public bool? IsSortKey { get; set; }

    [JsonPropertyName("bleed")]
    public bool? Bleed { get; set; }

    [JsonPropertyName("minHeight")]
    public string? MinHeight { get; set; }

    [JsonPropertyName("pageAnimation")]
    public CarouselPageAnimation? PageAnimation { get; set; }

    [JsonPropertyName("grid.area")]
    public string? GridArea { get; set; }

    [JsonPropertyName("fallback")]
    public IUnion<CardElement, FallbackElement>? Fallback { get; set; }

    [JsonPropertyName("pages")]
    public IList<CarouselPage>? Pages { get; set; }

    public Carousel WithId(string value)
    {
        this.Id = value;
        return this;
    }

    public Carousel WithRequires(HostCapabilities value)
    {
        this.Requires = value;
        return this;
    }

    public Carousel WithLang(string value)
    {
        this.Lang = value;
        return this;
    }

    public Carousel WithIsVisible(bool value)
    {
        this.IsVisible = value;
        return this;
    }

    public Carousel WithSeparator(bool value)
    {
        this.Separator = value;
        return this;
    }

    public Carousel WithHeight(ElementHeight value)
    {
        this.Height = value;
        return this;
    }

    public Carousel WithSpacing(Spacing value)
    {
        this.Spacing = value;
        return this;
    }

    public Carousel WithTargetWidth(TargetWidth value)
    {
        this.TargetWidth = value;
        return this;
    }

    public Carousel WithIsSortKey(bool value)
    {
        this.IsSortKey = value;
        return this;
    }

    public Carousel WithBleed(bool value)
    {
        this.Bleed = value;
        return this;
    }

    public Carousel WithMinHeight(string value)
    {
        this.MinHeight = value;
        return this;
    }

    public Carousel WithPageAnimation(CarouselPageAnimation value)
    {
        this.PageAnimation = value;
        return this;
    }

    public Carousel WithGridArea(string value)
    {
        this.GridArea = value;
        return this;
    }

    public Carousel WithFallback(IUnion<CardElement, FallbackElement> value)
    {
        this.Fallback = value;
        return this;
    }

    public Carousel WithPages(params IList<CarouselPage> value)
    {
        this.Pages = value;
        return this;
    }
}

public class Badge : CardElement
{
    [JsonPropertyName("type")]
    public string Type { get; } = "Badge";

    [JsonPropertyName("id")]
    public string? Id { get; set; }

    [JsonPropertyName("requires")]
    public HostCapabilities? Requires { get; set; }

    [JsonPropertyName("lang")]
    public string? Lang { get; set; }

    [JsonPropertyName("isVisible")]
    public bool? IsVisible { get; set; }

    [JsonPropertyName("separator")]
    public bool? Separator { get; set; }

    [JsonPropertyName("height")]
    public ElementHeight? Height { get; set; }

    [JsonPropertyName("horizontalAlignment")]
    public HorizontalAlignment? HorizontalAlignment { get; set; }

    [JsonPropertyName("spacing")]
    public Spacing? Spacing { get; set; }

    [JsonPropertyName("targetWidth")]
    public TargetWidth? TargetWidth { get; set; }

    [JsonPropertyName("isSortKey")]
    public bool? IsSortKey { get; set; }

    [JsonPropertyName("text")]
    public string? Text { get; set; }

    [JsonPropertyName("icon")]
    public string? Icon { get; set; }

    [JsonPropertyName("iconPosition")]
    public BadgeIconPosition? IconPosition { get; set; }

    [JsonPropertyName("appearance")]
    public BadgeAppearance? Appearance { get; set; }

    [JsonPropertyName("size")]
    public BadgeSize? Size { get; set; }

    [JsonPropertyName("shape")]
    public BadgeShape? Shape { get; set; }

    [JsonPropertyName("style")]
    public BadgeStyle? Style { get; set; }

    [JsonPropertyName("tooltip")]
    public string? Tooltip { get; set; }

    [JsonPropertyName("grid.area")]
    public string? GridArea { get; set; }

    [JsonPropertyName("fallback")]
    public IUnion<CardElement, FallbackElement>? Fallback { get; set; }

    public Badge WithId(string value)
    {
        this.Id = value;
        return this;
    }

    public Badge WithRequires(HostCapabilities value)
    {
        this.Requires = value;
        return this;
    }

    public Badge WithLang(string value)
    {
        this.Lang = value;
        return this;
    }

    public Badge WithIsVisible(bool value)
    {
        this.IsVisible = value;
        return this;
    }

    public Badge WithSeparator(bool value)
    {
        this.Separator = value;
        return this;
    }

    public Badge WithHeight(ElementHeight value)
    {
        this.Height = value;
        return this;
    }

    public Badge WithHorizontalAlignment(HorizontalAlignment value)
    {
        this.HorizontalAlignment = value;
        return this;
    }

    public Badge WithSpacing(Spacing value)
    {
        this.Spacing = value;
        return this;
    }

    public Badge WithTargetWidth(TargetWidth value)
    {
        this.TargetWidth = value;
        return this;
    }

    public Badge WithIsSortKey(bool value)
    {
        this.IsSortKey = value;
        return this;
    }

    public Badge WithText(string value)
    {
        this.Text = value;
        return this;
    }

    public Badge WithIcon(string value)
    {
        this.Icon = value;
        return this;
    }

    public Badge WithIconPosition(BadgeIconPosition value)
    {
        this.IconPosition = value;
        return this;
    }

    public Badge WithAppearance(BadgeAppearance value)
    {
        this.Appearance = value;
        return this;
    }

    public Badge WithSize(BadgeSize value)
    {
        this.Size = value;
        return this;
    }

    public Badge WithShape(BadgeShape value)
    {
        this.Shape = value;
        return this;
    }

    public Badge WithStyle(BadgeStyle value)
    {
        this.Style = value;
        return this;
    }

    public Badge WithTooltip(string value)
    {
        this.Tooltip = value;
        return this;
    }

    public Badge WithGridArea(string value)
    {
        this.GridArea = value;
        return this;
    }

    public Badge WithFallback(IUnion<CardElement, FallbackElement> value)
    {
        this.Fallback = value;
        return this;
    }
}

public class DonutChart : CardElement
{
    [JsonPropertyName("type")]
    public string Type { get; } = "Chart.Donut";

    [JsonPropertyName("id")]
    public string? Id { get; set; }

    [JsonPropertyName("requires")]
    public HostCapabilities? Requires { get; set; }

    [JsonPropertyName("lang")]
    public string? Lang { get; set; }

    [JsonPropertyName("isVisible")]
    public bool? IsVisible { get; set; }

    [JsonPropertyName("separator")]
    public bool? Separator { get; set; }

    [JsonPropertyName("height")]
    public ElementHeight? Height { get; set; }

    [JsonPropertyName("horizontalAlignment")]
    public HorizontalAlignment? HorizontalAlignment { get; set; }

    [JsonPropertyName("spacing")]
    public Spacing? Spacing { get; set; }

    [JsonPropertyName("targetWidth")]
    public TargetWidth? TargetWidth { get; set; }

    [JsonPropertyName("isSortKey")]
    public bool? IsSortKey { get; set; }

    [JsonPropertyName("title")]
    public string? Title { get; set; }

    [JsonPropertyName("colorSet")]
    public ChartColorSet? ColorSet { get; set; }

    [JsonPropertyName("data")]
    public IList<DonutChartData>? Data { get; set; }

    [JsonPropertyName("grid.area")]
    public string? GridArea { get; set; }

    [JsonPropertyName("fallback")]
    public IUnion<CardElement, FallbackElement>? Fallback { get; set; }

    public DonutChart WithId(string value)
    {
        this.Id = value;
        return this;
    }

    public DonutChart WithRequires(HostCapabilities value)
    {
        this.Requires = value;
        return this;
    }

    public DonutChart WithLang(string value)
    {
        this.Lang = value;
        return this;
    }

    public DonutChart WithIsVisible(bool value)
    {
        this.IsVisible = value;
        return this;
    }

    public DonutChart WithSeparator(bool value)
    {
        this.Separator = value;
        return this;
    }

    public DonutChart WithHeight(ElementHeight value)
    {
        this.Height = value;
        return this;
    }

    public DonutChart WithHorizontalAlignment(HorizontalAlignment value)
    {
        this.HorizontalAlignment = value;
        return this;
    }

    public DonutChart WithSpacing(Spacing value)
    {
        this.Spacing = value;
        return this;
    }

    public DonutChart WithTargetWidth(TargetWidth value)
    {
        this.TargetWidth = value;
        return this;
    }

    public DonutChart WithIsSortKey(bool value)
    {
        this.IsSortKey = value;
        return this;
    }

    public DonutChart WithTitle(string value)
    {
        this.Title = value;
        return this;
    }

    public DonutChart WithColorSet(ChartColorSet value)
    {
        this.ColorSet = value;
        return this;
    }

    public DonutChart WithData(params IList<DonutChartData> value)
    {
        this.Data = value;
        return this;
    }

    public DonutChart WithGridArea(string value)
    {
        this.GridArea = value;
        return this;
    }

    public DonutChart WithFallback(IUnion<CardElement, FallbackElement> value)
    {
        this.Fallback = value;
        return this;
    }
}

public class DonutChartData : SerializableObject
{
    [JsonPropertyName("legend")]
    public string? Legend { get; set; }

    [JsonPropertyName("value")]
    public float? Value { get; set; }

    [JsonPropertyName("color")]
    public ChartColor? Color { get; set; }

    public DonutChartData WithLegend(string value)
    {
        this.Legend = value;
        return this;
    }

    public DonutChartData WithValue(float value)
    {
        this.Value = value;
        return this;
    }

    public DonutChartData WithColor(ChartColor value)
    {
        this.Color = value;
        return this;
    }
}

public class PieChart : CardElement
{
    [JsonPropertyName("type")]
    public string Type { get; } = "Chart.Pie";

    [JsonPropertyName("id")]
    public string? Id { get; set; }

    [JsonPropertyName("requires")]
    public HostCapabilities? Requires { get; set; }

    [JsonPropertyName("lang")]
    public string? Lang { get; set; }

    [JsonPropertyName("isVisible")]
    public bool? IsVisible { get; set; }

    [JsonPropertyName("separator")]
    public bool? Separator { get; set; }

    [JsonPropertyName("height")]
    public ElementHeight? Height { get; set; }

    [JsonPropertyName("horizontalAlignment")]
    public HorizontalAlignment? HorizontalAlignment { get; set; }

    [JsonPropertyName("spacing")]
    public Spacing? Spacing { get; set; }

    [JsonPropertyName("targetWidth")]
    public TargetWidth? TargetWidth { get; set; }

    [JsonPropertyName("isSortKey")]
    public bool? IsSortKey { get; set; }

    [JsonPropertyName("title")]
    public string? Title { get; set; }

    [JsonPropertyName("colorSet")]
    public ChartColorSet? ColorSet { get; set; }

    [JsonPropertyName("data")]
    public IList<DonutChartData>? Data { get; set; }

    [JsonPropertyName("grid.area")]
    public string? GridArea { get; set; }

    [JsonPropertyName("fallback")]
    public IUnion<CardElement, FallbackElement>? Fallback { get; set; }

    public PieChart WithId(string value)
    {
        this.Id = value;
        return this;
    }

    public PieChart WithRequires(HostCapabilities value)
    {
        this.Requires = value;
        return this;
    }

    public PieChart WithLang(string value)
    {
        this.Lang = value;
        return this;
    }

    public PieChart WithIsVisible(bool value)
    {
        this.IsVisible = value;
        return this;
    }

    public PieChart WithSeparator(bool value)
    {
        this.Separator = value;
        return this;
    }

    public PieChart WithHeight(ElementHeight value)
    {
        this.Height = value;
        return this;
    }

    public PieChart WithHorizontalAlignment(HorizontalAlignment value)
    {
        this.HorizontalAlignment = value;
        return this;
    }

    public PieChart WithSpacing(Spacing value)
    {
        this.Spacing = value;
        return this;
    }

    public PieChart WithTargetWidth(TargetWidth value)
    {
        this.TargetWidth = value;
        return this;
    }

    public PieChart WithIsSortKey(bool value)
    {
        this.IsSortKey = value;
        return this;
    }

    public PieChart WithTitle(string value)
    {
        this.Title = value;
        return this;
    }

    public PieChart WithColorSet(ChartColorSet value)
    {
        this.ColorSet = value;
        return this;
    }

    public PieChart WithData(params IList<DonutChartData> value)
    {
        this.Data = value;
        return this;
    }

    public PieChart WithGridArea(string value)
    {
        this.GridArea = value;
        return this;
    }

    public PieChart WithFallback(IUnion<CardElement, FallbackElement> value)
    {
        this.Fallback = value;
        return this;
    }
}

public class GroupedVerticalBarChart : CardElement
{
    [JsonPropertyName("type")]
    public string Type { get; } = "Chart.VerticalBar.Grouped";

    [JsonPropertyName("id")]
    public string? Id { get; set; }

    [JsonPropertyName("requires")]
    public HostCapabilities? Requires { get; set; }

    [JsonPropertyName("lang")]
    public string? Lang { get; set; }

    [JsonPropertyName("isVisible")]
    public bool? IsVisible { get; set; }

    [JsonPropertyName("separator")]
    public bool? Separator { get; set; }

    [JsonPropertyName("height")]
    public ElementHeight? Height { get; set; }

    [JsonPropertyName("horizontalAlignment")]
    public HorizontalAlignment? HorizontalAlignment { get; set; }

    [JsonPropertyName("spacing")]
    public Spacing? Spacing { get; set; }

    [JsonPropertyName("targetWidth")]
    public TargetWidth? TargetWidth { get; set; }

    [JsonPropertyName("isSortKey")]
    public bool? IsSortKey { get; set; }

    [JsonPropertyName("title")]
    public string? Title { get; set; }

    [JsonPropertyName("colorSet")]
    public ChartColorSet? ColorSet { get; set; }

    [JsonPropertyName("xAxisTitle")]
    public string? XAxisTitle { get; set; }

    [JsonPropertyName("yAxisTitle")]
    public string? YAxisTitle { get; set; }

    [JsonPropertyName("color")]
    public ChartColor? Color { get; set; }

    [JsonPropertyName("stacked")]
    public bool? Stacked { get; set; }

    [JsonPropertyName("data")]
    public IList<GroupedVerticalBarChartData>? Data { get; set; }

    [JsonPropertyName("showBarValues")]
    public bool? ShowBarValues { get; set; }

    [JsonPropertyName("grid.area")]
    public string? GridArea { get; set; }

    [JsonPropertyName("fallback")]
    public IUnion<CardElement, FallbackElement>? Fallback { get; set; }

    public GroupedVerticalBarChart WithId(string value)
    {
        this.Id = value;
        return this;
    }

    public GroupedVerticalBarChart WithRequires(HostCapabilities value)
    {
        this.Requires = value;
        return this;
    }

    public GroupedVerticalBarChart WithLang(string value)
    {
        this.Lang = value;
        return this;
    }

    public GroupedVerticalBarChart WithIsVisible(bool value)
    {
        this.IsVisible = value;
        return this;
    }

    public GroupedVerticalBarChart WithSeparator(bool value)
    {
        this.Separator = value;
        return this;
    }

    public GroupedVerticalBarChart WithHeight(ElementHeight value)
    {
        this.Height = value;
        return this;
    }

    public GroupedVerticalBarChart WithHorizontalAlignment(HorizontalAlignment value)
    {
        this.HorizontalAlignment = value;
        return this;
    }

    public GroupedVerticalBarChart WithSpacing(Spacing value)
    {
        this.Spacing = value;
        return this;
    }

    public GroupedVerticalBarChart WithTargetWidth(TargetWidth value)
    {
        this.TargetWidth = value;
        return this;
    }

    public GroupedVerticalBarChart WithIsSortKey(bool value)
    {
        this.IsSortKey = value;
        return this;
    }

    public GroupedVerticalBarChart WithTitle(string value)
    {
        this.Title = value;
        return this;
    }

    public GroupedVerticalBarChart WithColorSet(ChartColorSet value)
    {
        this.ColorSet = value;
        return this;
    }

    public GroupedVerticalBarChart WithXAxisTitle(string value)
    {
        this.XAxisTitle = value;
        return this;
    }

    public GroupedVerticalBarChart WithYAxisTitle(string value)
    {
        this.YAxisTitle = value;
        return this;
    }

    public GroupedVerticalBarChart WithColor(ChartColor value)
    {
        this.Color = value;
        return this;
    }

    public GroupedVerticalBarChart WithStacked(bool value)
    {
        this.Stacked = value;
        return this;
    }

    public GroupedVerticalBarChart WithData(params IList<GroupedVerticalBarChartData> value)
    {
        this.Data = value;
        return this;
    }

    public GroupedVerticalBarChart WithShowBarValues(bool value)
    {
        this.ShowBarValues = value;
        return this;
    }

    public GroupedVerticalBarChart WithGridArea(string value)
    {
        this.GridArea = value;
        return this;
    }

    public GroupedVerticalBarChart WithFallback(IUnion<CardElement, FallbackElement> value)
    {
        this.Fallback = value;
        return this;
    }
}

public class GroupedVerticalBarChartData : SerializableObject
{
    [JsonPropertyName("legend")]
    public string? Legend { get; set; }

    [JsonPropertyName("values")]
    public IList<BarChartDataValue>? Values { get; set; }

    [JsonPropertyName("color")]
    public ChartColor? Color { get; set; }

    public GroupedVerticalBarChartData WithLegend(string value)
    {
        this.Legend = value;
        return this;
    }

    public GroupedVerticalBarChartData WithValues(params IList<BarChartDataValue> value)
    {
        this.Values = value;
        return this;
    }

    public GroupedVerticalBarChartData WithColor(ChartColor value)
    {
        this.Color = value;
        return this;
    }
}

public class BarChartDataValue : SerializableObject
{
    [JsonPropertyName("x")]
    public string? X { get; set; }

    [JsonPropertyName("y")]
    public float? Y { get; set; }

    public BarChartDataValue WithX(string value)
    {
        this.X = value;
        return this;
    }

    public BarChartDataValue WithY(float value)
    {
        this.Y = value;
        return this;
    }
}

public class VerticalBarChart : CardElement
{
    [JsonPropertyName("type")]
    public string Type { get; } = "Chart.VerticalBar";

    [JsonPropertyName("id")]
    public string? Id { get; set; }

    [JsonPropertyName("requires")]
    public HostCapabilities? Requires { get; set; }

    [JsonPropertyName("lang")]
    public string? Lang { get; set; }

    [JsonPropertyName("isVisible")]
    public bool? IsVisible { get; set; }

    [JsonPropertyName("separator")]
    public bool? Separator { get; set; }

    [JsonPropertyName("height")]
    public ElementHeight? Height { get; set; }

    [JsonPropertyName("horizontalAlignment")]
    public HorizontalAlignment? HorizontalAlignment { get; set; }

    [JsonPropertyName("spacing")]
    public Spacing? Spacing { get; set; }

    [JsonPropertyName("targetWidth")]
    public TargetWidth? TargetWidth { get; set; }

    [JsonPropertyName("isSortKey")]
    public bool? IsSortKey { get; set; }

    [JsonPropertyName("title")]
    public string? Title { get; set; }

    [JsonPropertyName("colorSet")]
    public ChartColorSet? ColorSet { get; set; }

    [JsonPropertyName("xAxisTitle")]
    public string? XAxisTitle { get; set; }

    [JsonPropertyName("yAxisTitle")]
    public string? YAxisTitle { get; set; }

    [JsonPropertyName("data")]
    public IList<VerticalBarChartDataValue>? Data { get; set; }

    [JsonPropertyName("color")]
    public ChartColor? Color { get; set; }

    [JsonPropertyName("showBarValues")]
    public bool? ShowBarValues { get; set; }

    [JsonPropertyName("grid.area")]
    public string? GridArea { get; set; }

    [JsonPropertyName("fallback")]
    public IUnion<CardElement, FallbackElement>? Fallback { get; set; }

    public VerticalBarChart WithId(string value)
    {
        this.Id = value;
        return this;
    }

    public VerticalBarChart WithRequires(HostCapabilities value)
    {
        this.Requires = value;
        return this;
    }

    public VerticalBarChart WithLang(string value)
    {
        this.Lang = value;
        return this;
    }

    public VerticalBarChart WithIsVisible(bool value)
    {
        this.IsVisible = value;
        return this;
    }

    public VerticalBarChart WithSeparator(bool value)
    {
        this.Separator = value;
        return this;
    }

    public VerticalBarChart WithHeight(ElementHeight value)
    {
        this.Height = value;
        return this;
    }

    public VerticalBarChart WithHorizontalAlignment(HorizontalAlignment value)
    {
        this.HorizontalAlignment = value;
        return this;
    }

    public VerticalBarChart WithSpacing(Spacing value)
    {
        this.Spacing = value;
        return this;
    }

    public VerticalBarChart WithTargetWidth(TargetWidth value)
    {
        this.TargetWidth = value;
        return this;
    }

    public VerticalBarChart WithIsSortKey(bool value)
    {
        this.IsSortKey = value;
        return this;
    }

    public VerticalBarChart WithTitle(string value)
    {
        this.Title = value;
        return this;
    }

    public VerticalBarChart WithColorSet(ChartColorSet value)
    {
        this.ColorSet = value;
        return this;
    }

    public VerticalBarChart WithXAxisTitle(string value)
    {
        this.XAxisTitle = value;
        return this;
    }

    public VerticalBarChart WithYAxisTitle(string value)
    {
        this.YAxisTitle = value;
        return this;
    }

    public VerticalBarChart WithData(params IList<VerticalBarChartDataValue> value)
    {
        this.Data = value;
        return this;
    }

    public VerticalBarChart WithColor(ChartColor value)
    {
        this.Color = value;
        return this;
    }

    public VerticalBarChart WithShowBarValues(bool value)
    {
        this.ShowBarValues = value;
        return this;
    }

    public VerticalBarChart WithGridArea(string value)
    {
        this.GridArea = value;
        return this;
    }

    public VerticalBarChart WithFallback(IUnion<CardElement, FallbackElement> value)
    {
        this.Fallback = value;
        return this;
    }
}

public class VerticalBarChartDataValue : SerializableObject
{
    [JsonPropertyName("x")]
    public IUnion<string, float>? X { get; set; }

    [JsonPropertyName("y")]
    public float? Y { get; set; }

    [JsonPropertyName("color")]
    public ChartColor? Color { get; set; }

    public VerticalBarChartDataValue WithX(IUnion<string, float> value)
    {
        this.X = value;
        return this;
    }

    public VerticalBarChartDataValue WithY(float value)
    {
        this.Y = value;
        return this;
    }

    public VerticalBarChartDataValue WithColor(ChartColor value)
    {
        this.Color = value;
        return this;
    }
}

public class HorizontalBarChart : CardElement
{
    [JsonPropertyName("type")]
    public string Type { get; } = "Chart.HorizontalBar";

    [JsonPropertyName("id")]
    public string? Id { get; set; }

    [JsonPropertyName("requires")]
    public HostCapabilities? Requires { get; set; }

    [JsonPropertyName("lang")]
    public string? Lang { get; set; }

    [JsonPropertyName("isVisible")]
    public bool? IsVisible { get; set; }

    [JsonPropertyName("separator")]
    public bool? Separator { get; set; }

    [JsonPropertyName("height")]
    public ElementHeight? Height { get; set; }

    [JsonPropertyName("horizontalAlignment")]
    public HorizontalAlignment? HorizontalAlignment { get; set; }

    [JsonPropertyName("spacing")]
    public Spacing? Spacing { get; set; }

    [JsonPropertyName("targetWidth")]
    public TargetWidth? TargetWidth { get; set; }

    [JsonPropertyName("isSortKey")]
    public bool? IsSortKey { get; set; }

    [JsonPropertyName("title")]
    public string? Title { get; set; }

    [JsonPropertyName("colorSet")]
    public ChartColorSet? ColorSet { get; set; }

    [JsonPropertyName("xAxisTitle")]
    public string? XAxisTitle { get; set; }

    [JsonPropertyName("yAxisTitle")]
    public string? YAxisTitle { get; set; }

    [JsonPropertyName("color")]
    public ChartColor? Color { get; set; }

    [JsonPropertyName("data")]
    public IList<HorizontalBarChartDataValue>? Data { get; set; }

    [JsonPropertyName("displayMode")]
    public HorizontalBarChartDisplayMode? DisplayMode { get; set; }

    [JsonPropertyName("grid.area")]
    public string? GridArea { get; set; }

    [JsonPropertyName("fallback")]
    public IUnion<CardElement, FallbackElement>? Fallback { get; set; }

    public HorizontalBarChart WithId(string value)
    {
        this.Id = value;
        return this;
    }

    public HorizontalBarChart WithRequires(HostCapabilities value)
    {
        this.Requires = value;
        return this;
    }

    public HorizontalBarChart WithLang(string value)
    {
        this.Lang = value;
        return this;
    }

    public HorizontalBarChart WithIsVisible(bool value)
    {
        this.IsVisible = value;
        return this;
    }

    public HorizontalBarChart WithSeparator(bool value)
    {
        this.Separator = value;
        return this;
    }

    public HorizontalBarChart WithHeight(ElementHeight value)
    {
        this.Height = value;
        return this;
    }

    public HorizontalBarChart WithHorizontalAlignment(HorizontalAlignment value)
    {
        this.HorizontalAlignment = value;
        return this;
    }

    public HorizontalBarChart WithSpacing(Spacing value)
    {
        this.Spacing = value;
        return this;
    }

    public HorizontalBarChart WithTargetWidth(TargetWidth value)
    {
        this.TargetWidth = value;
        return this;
    }

    public HorizontalBarChart WithIsSortKey(bool value)
    {
        this.IsSortKey = value;
        return this;
    }

    public HorizontalBarChart WithTitle(string value)
    {
        this.Title = value;
        return this;
    }

    public HorizontalBarChart WithColorSet(ChartColorSet value)
    {
        this.ColorSet = value;
        return this;
    }

    public HorizontalBarChart WithXAxisTitle(string value)
    {
        this.XAxisTitle = value;
        return this;
    }

    public HorizontalBarChart WithYAxisTitle(string value)
    {
        this.YAxisTitle = value;
        return this;
    }

    public HorizontalBarChart WithColor(ChartColor value)
    {
        this.Color = value;
        return this;
    }

    public HorizontalBarChart WithData(params IList<HorizontalBarChartDataValue> value)
    {
        this.Data = value;
        return this;
    }

    public HorizontalBarChart WithDisplayMode(HorizontalBarChartDisplayMode value)
    {
        this.DisplayMode = value;
        return this;
    }

    public HorizontalBarChart WithGridArea(string value)
    {
        this.GridArea = value;
        return this;
    }

    public HorizontalBarChart WithFallback(IUnion<CardElement, FallbackElement> value)
    {
        this.Fallback = value;
        return this;
    }
}

public class HorizontalBarChartDataValue : SerializableObject
{
    [JsonPropertyName("x")]
    public string? X { get; set; }

    [JsonPropertyName("y")]
    public float? Y { get; set; }

    [JsonPropertyName("color")]
    public ChartColor? Color { get; set; }

    public HorizontalBarChartDataValue WithX(string value)
    {
        this.X = value;
        return this;
    }

    public HorizontalBarChartDataValue WithY(float value)
    {
        this.Y = value;
        return this;
    }

    public HorizontalBarChartDataValue WithColor(ChartColor value)
    {
        this.Color = value;
        return this;
    }
}

public class StackedHorizontalBarChart : CardElement
{
    [JsonPropertyName("type")]
    public string Type { get; } = "Chart.HorizontalBar.Stacked";

    [JsonPropertyName("id")]
    public string? Id { get; set; }

    [JsonPropertyName("requires")]
    public HostCapabilities? Requires { get; set; }

    [JsonPropertyName("lang")]
    public string? Lang { get; set; }

    [JsonPropertyName("isVisible")]
    public bool? IsVisible { get; set; }

    [JsonPropertyName("separator")]
    public bool? Separator { get; set; }

    [JsonPropertyName("height")]
    public ElementHeight? Height { get; set; }

    [JsonPropertyName("horizontalAlignment")]
    public HorizontalAlignment? HorizontalAlignment { get; set; }

    [JsonPropertyName("spacing")]
    public Spacing? Spacing { get; set; }

    [JsonPropertyName("targetWidth")]
    public TargetWidth? TargetWidth { get; set; }

    [JsonPropertyName("isSortKey")]
    public bool? IsSortKey { get; set; }

    [JsonPropertyName("title")]
    public string? Title { get; set; }

    [JsonPropertyName("colorSet")]
    public ChartColorSet? ColorSet { get; set; }

    [JsonPropertyName("xAxisTitle")]
    public string? XAxisTitle { get; set; }

    [JsonPropertyName("yAxisTitle")]
    public string? YAxisTitle { get; set; }

    [JsonPropertyName("color")]
    public ChartColor? Color { get; set; }

    [JsonPropertyName("data")]
    public IList<StackedHorizontalBarChartData>? Data { get; set; }

    [JsonPropertyName("grid.area")]
    public string? GridArea { get; set; }

    [JsonPropertyName("fallback")]
    public IUnion<CardElement, FallbackElement>? Fallback { get; set; }

    public StackedHorizontalBarChart WithId(string value)
    {
        this.Id = value;
        return this;
    }

    public StackedHorizontalBarChart WithRequires(HostCapabilities value)
    {
        this.Requires = value;
        return this;
    }

    public StackedHorizontalBarChart WithLang(string value)
    {
        this.Lang = value;
        return this;
    }

    public StackedHorizontalBarChart WithIsVisible(bool value)
    {
        this.IsVisible = value;
        return this;
    }

    public StackedHorizontalBarChart WithSeparator(bool value)
    {
        this.Separator = value;
        return this;
    }

    public StackedHorizontalBarChart WithHeight(ElementHeight value)
    {
        this.Height = value;
        return this;
    }

    public StackedHorizontalBarChart WithHorizontalAlignment(HorizontalAlignment value)
    {
        this.HorizontalAlignment = value;
        return this;
    }

    public StackedHorizontalBarChart WithSpacing(Spacing value)
    {
        this.Spacing = value;
        return this;
    }

    public StackedHorizontalBarChart WithTargetWidth(TargetWidth value)
    {
        this.TargetWidth = value;
        return this;
    }

    public StackedHorizontalBarChart WithIsSortKey(bool value)
    {
        this.IsSortKey = value;
        return this;
    }

    public StackedHorizontalBarChart WithTitle(string value)
    {
        this.Title = value;
        return this;
    }

    public StackedHorizontalBarChart WithColorSet(ChartColorSet value)
    {
        this.ColorSet = value;
        return this;
    }

    public StackedHorizontalBarChart WithXAxisTitle(string value)
    {
        this.XAxisTitle = value;
        return this;
    }

    public StackedHorizontalBarChart WithYAxisTitle(string value)
    {
        this.YAxisTitle = value;
        return this;
    }

    public StackedHorizontalBarChart WithColor(ChartColor value)
    {
        this.Color = value;
        return this;
    }

    public StackedHorizontalBarChart WithData(params IList<StackedHorizontalBarChartData> value)
    {
        this.Data = value;
        return this;
    }

    public StackedHorizontalBarChart WithGridArea(string value)
    {
        this.GridArea = value;
        return this;
    }

    public StackedHorizontalBarChart WithFallback(IUnion<CardElement, FallbackElement> value)
    {
        this.Fallback = value;
        return this;
    }
}

public class StackedHorizontalBarChartData : SerializableObject
{
    [JsonPropertyName("title")]
    public string? Title { get; set; }

    [JsonPropertyName("data")]
    public IList<StackedHorizontalBarChartDataPoint>? Data { get; set; }

    public StackedHorizontalBarChartData WithTitle(string value)
    {
        this.Title = value;
        return this;
    }

    public StackedHorizontalBarChartData WithData(params IList<StackedHorizontalBarChartDataPoint> value)
    {
        this.Data = value;
        return this;
    }
}

public class StackedHorizontalBarChartDataPoint : SerializableObject
{
    [JsonPropertyName("legend")]
    public string? Legend { get; set; }

    [JsonPropertyName("value")]
    public float? Value { get; set; }

    [JsonPropertyName("color")]
    public ChartColor? Color { get; set; }

    public StackedHorizontalBarChartDataPoint WithLegend(string value)
    {
        this.Legend = value;
        return this;
    }

    public StackedHorizontalBarChartDataPoint WithValue(float value)
    {
        this.Value = value;
        return this;
    }

    public StackedHorizontalBarChartDataPoint WithColor(ChartColor value)
    {
        this.Color = value;
        return this;
    }
}

public class LineChart : CardElement
{
    [JsonPropertyName("type")]
    public string Type { get; } = "Chart.Line";

    [JsonPropertyName("id")]
    public string? Id { get; set; }

    [JsonPropertyName("requires")]
    public HostCapabilities? Requires { get; set; }

    [JsonPropertyName("lang")]
    public string? Lang { get; set; }

    [JsonPropertyName("isVisible")]
    public bool? IsVisible { get; set; }

    [JsonPropertyName("separator")]
    public bool? Separator { get; set; }

    [JsonPropertyName("height")]
    public ElementHeight? Height { get; set; }

    [JsonPropertyName("horizontalAlignment")]
    public HorizontalAlignment? HorizontalAlignment { get; set; }

    [JsonPropertyName("spacing")]
    public Spacing? Spacing { get; set; }

    [JsonPropertyName("targetWidth")]
    public TargetWidth? TargetWidth { get; set; }

    [JsonPropertyName("isSortKey")]
    public bool? IsSortKey { get; set; }

    [JsonPropertyName("title")]
    public string? Title { get; set; }

    [JsonPropertyName("colorSet")]
    public ChartColorSet? ColorSet { get; set; }

    [JsonPropertyName("xAxisTitle")]
    public string? XAxisTitle { get; set; }

    [JsonPropertyName("yAxisTitle")]
    public string? YAxisTitle { get; set; }

    [JsonPropertyName("color")]
    public ChartColor? Color { get; set; }

    [JsonPropertyName("data")]
    public IList<LineChartData>? Data { get; set; }

    [JsonPropertyName("grid.area")]
    public string? GridArea { get; set; }

    [JsonPropertyName("fallback")]
    public IUnion<CardElement, FallbackElement>? Fallback { get; set; }

    public LineChart WithId(string value)
    {
        this.Id = value;
        return this;
    }

    public LineChart WithRequires(HostCapabilities value)
    {
        this.Requires = value;
        return this;
    }

    public LineChart WithLang(string value)
    {
        this.Lang = value;
        return this;
    }

    public LineChart WithIsVisible(bool value)
    {
        this.IsVisible = value;
        return this;
    }

    public LineChart WithSeparator(bool value)
    {
        this.Separator = value;
        return this;
    }

    public LineChart WithHeight(ElementHeight value)
    {
        this.Height = value;
        return this;
    }

    public LineChart WithHorizontalAlignment(HorizontalAlignment value)
    {
        this.HorizontalAlignment = value;
        return this;
    }

    public LineChart WithSpacing(Spacing value)
    {
        this.Spacing = value;
        return this;
    }

    public LineChart WithTargetWidth(TargetWidth value)
    {
        this.TargetWidth = value;
        return this;
    }

    public LineChart WithIsSortKey(bool value)
    {
        this.IsSortKey = value;
        return this;
    }

    public LineChart WithTitle(string value)
    {
        this.Title = value;
        return this;
    }

    public LineChart WithColorSet(ChartColorSet value)
    {
        this.ColorSet = value;
        return this;
    }

    public LineChart WithXAxisTitle(string value)
    {
        this.XAxisTitle = value;
        return this;
    }

    public LineChart WithYAxisTitle(string value)
    {
        this.YAxisTitle = value;
        return this;
    }

    public LineChart WithColor(ChartColor value)
    {
        this.Color = value;
        return this;
    }

    public LineChart WithData(params IList<LineChartData> value)
    {
        this.Data = value;
        return this;
    }

    public LineChart WithGridArea(string value)
    {
        this.GridArea = value;
        return this;
    }

    public LineChart WithFallback(IUnion<CardElement, FallbackElement> value)
    {
        this.Fallback = value;
        return this;
    }
}

public class LineChartData : SerializableObject
{
    [JsonPropertyName("legend")]
    public string? Legend { get; set; }

    [JsonPropertyName("values")]
    public IList<LineChartValue>? Values { get; set; }

    [JsonPropertyName("color")]
    public ChartColor? Color { get; set; }

    public LineChartData WithLegend(string value)
    {
        this.Legend = value;
        return this;
    }

    public LineChartData WithValues(params IList<LineChartValue> value)
    {
        this.Values = value;
        return this;
    }

    public LineChartData WithColor(ChartColor value)
    {
        this.Color = value;
        return this;
    }
}

public class LineChartValue : SerializableObject
{
    [JsonPropertyName("x")]
    public IUnion<float, string>? X { get; set; }

    [JsonPropertyName("y")]
    public float? Y { get; set; }

    public LineChartValue WithX(IUnion<float, string> value)
    {
        this.X = value;
        return this;
    }

    public LineChartValue WithY(float value)
    {
        this.Y = value;
        return this;
    }
}

public class GaugeChart : CardElement
{
    [JsonPropertyName("type")]
    public string Type { get; } = "Chart.Gauge";

    [JsonPropertyName("id")]
    public string? Id { get; set; }

    [JsonPropertyName("requires")]
    public HostCapabilities? Requires { get; set; }

    [JsonPropertyName("lang")]
    public string? Lang { get; set; }

    [JsonPropertyName("isVisible")]
    public bool? IsVisible { get; set; }

    [JsonPropertyName("separator")]
    public bool? Separator { get; set; }

    [JsonPropertyName("height")]
    public ElementHeight? Height { get; set; }

    [JsonPropertyName("horizontalAlignment")]
    public HorizontalAlignment? HorizontalAlignment { get; set; }

    [JsonPropertyName("spacing")]
    public Spacing? Spacing { get; set; }

    [JsonPropertyName("targetWidth")]
    public TargetWidth? TargetWidth { get; set; }

    [JsonPropertyName("isSortKey")]
    public bool? IsSortKey { get; set; }

    [JsonPropertyName("title")]
    public string? Title { get; set; }

    [JsonPropertyName("colorSet")]
    public ChartColorSet? ColorSet { get; set; }

    [JsonPropertyName("min")]
    public float? Min { get; set; }

    [JsonPropertyName("max")]
    public float? Max { get; set; }

    [JsonPropertyName("subLabel")]
    public string? SubLabel { get; set; }

    [JsonPropertyName("showMinMax")]
    public bool? ShowMinMax { get; set; }

    [JsonPropertyName("showLegend")]
    public bool? ShowLegend { get; set; }

    [JsonPropertyName("segments")]
    public IList<GaugeChartLegend>? Segments { get; set; }

    [JsonPropertyName("value")]
    public float? Value { get; set; }

    [JsonPropertyName("valueFormat")]
    public GaugeChartValueFormat? ValueFormat { get; set; }

    [JsonPropertyName("grid.area")]
    public string? GridArea { get; set; }

    [JsonPropertyName("fallback")]
    public IUnion<CardElement, FallbackElement>? Fallback { get; set; }

    public GaugeChart WithId(string value)
    {
        this.Id = value;
        return this;
    }

    public GaugeChart WithRequires(HostCapabilities value)
    {
        this.Requires = value;
        return this;
    }

    public GaugeChart WithLang(string value)
    {
        this.Lang = value;
        return this;
    }

    public GaugeChart WithIsVisible(bool value)
    {
        this.IsVisible = value;
        return this;
    }

    public GaugeChart WithSeparator(bool value)
    {
        this.Separator = value;
        return this;
    }

    public GaugeChart WithHeight(ElementHeight value)
    {
        this.Height = value;
        return this;
    }

    public GaugeChart WithHorizontalAlignment(HorizontalAlignment value)
    {
        this.HorizontalAlignment = value;
        return this;
    }

    public GaugeChart WithSpacing(Spacing value)
    {
        this.Spacing = value;
        return this;
    }

    public GaugeChart WithTargetWidth(TargetWidth value)
    {
        this.TargetWidth = value;
        return this;
    }

    public GaugeChart WithIsSortKey(bool value)
    {
        this.IsSortKey = value;
        return this;
    }

    public GaugeChart WithTitle(string value)
    {
        this.Title = value;
        return this;
    }

    public GaugeChart WithColorSet(ChartColorSet value)
    {
        this.ColorSet = value;
        return this;
    }

    public GaugeChart WithMin(float value)
    {
        this.Min = value;
        return this;
    }

    public GaugeChart WithMax(float value)
    {
        this.Max = value;
        return this;
    }

    public GaugeChart WithSubLabel(string value)
    {
        this.SubLabel = value;
        return this;
    }

    public GaugeChart WithShowMinMax(bool value)
    {
        this.ShowMinMax = value;
        return this;
    }

    public GaugeChart WithShowLegend(bool value)
    {
        this.ShowLegend = value;
        return this;
    }

    public GaugeChart WithSegments(params IList<GaugeChartLegend> value)
    {
        this.Segments = value;
        return this;
    }

    public GaugeChart WithValue(float value)
    {
        this.Value = value;
        return this;
    }

    public GaugeChart WithValueFormat(GaugeChartValueFormat value)
    {
        this.ValueFormat = value;
        return this;
    }

    public GaugeChart WithGridArea(string value)
    {
        this.GridArea = value;
        return this;
    }

    public GaugeChart WithFallback(IUnion<CardElement, FallbackElement> value)
    {
        this.Fallback = value;
        return this;
    }
}

public class GaugeChartLegend : SerializableObject
{
    [JsonPropertyName("size")]
    public float? Size { get; set; }

    [JsonPropertyName("legend")]
    public string? Legend { get; set; }

    [JsonPropertyName("color")]
    public ChartColor? Color { get; set; }

    public GaugeChartLegend WithSize(float value)
    {
        this.Size = value;
        return this;
    }

    public GaugeChartLegend WithLegend(string value)
    {
        this.Legend = value;
        return this;
    }

    public GaugeChartLegend WithColor(ChartColor value)
    {
        this.Color = value;
        return this;
    }
}

public class CodeBlock : CardElement
{
    [JsonPropertyName("type")]
    public string Type { get; } = "CodeBlock";

    [JsonPropertyName("id")]
    public string? Id { get; set; }

    [JsonPropertyName("requires")]
    public HostCapabilities? Requires { get; set; }

    [JsonPropertyName("lang")]
    public string? Lang { get; set; }

    [JsonPropertyName("isVisible")]
    public bool? IsVisible { get; set; }

    [JsonPropertyName("separator")]
    public bool? Separator { get; set; }

    [JsonPropertyName("height")]
    public ElementHeight? Height { get; set; }

    [JsonPropertyName("horizontalAlignment")]
    public HorizontalAlignment? HorizontalAlignment { get; set; }

    [JsonPropertyName("spacing")]
    public Spacing? Spacing { get; set; }

    [JsonPropertyName("targetWidth")]
    public TargetWidth? TargetWidth { get; set; }

    [JsonPropertyName("isSortKey")]
    public bool? IsSortKey { get; set; }

    [JsonPropertyName("codeSnippet")]
    public string? CodeSnippet { get; set; }

    [JsonPropertyName("language")]
    public CodeLanguage? Language { get; set; }

    [JsonPropertyName("startLineNumber")]
    public float? StartLineNumber { get; set; }

    [JsonPropertyName("grid.area")]
    public string? GridArea { get; set; }

    [JsonPropertyName("fallback")]
    public IUnion<CardElement, FallbackElement>? Fallback { get; set; }

    public CodeBlock WithId(string value)
    {
        this.Id = value;
        return this;
    }

    public CodeBlock WithRequires(HostCapabilities value)
    {
        this.Requires = value;
        return this;
    }

    public CodeBlock WithLang(string value)
    {
        this.Lang = value;
        return this;
    }

    public CodeBlock WithIsVisible(bool value)
    {
        this.IsVisible = value;
        return this;
    }

    public CodeBlock WithSeparator(bool value)
    {
        this.Separator = value;
        return this;
    }

    public CodeBlock WithHeight(ElementHeight value)
    {
        this.Height = value;
        return this;
    }

    public CodeBlock WithHorizontalAlignment(HorizontalAlignment value)
    {
        this.HorizontalAlignment = value;
        return this;
    }

    public CodeBlock WithSpacing(Spacing value)
    {
        this.Spacing = value;
        return this;
    }

    public CodeBlock WithTargetWidth(TargetWidth value)
    {
        this.TargetWidth = value;
        return this;
    }

    public CodeBlock WithIsSortKey(bool value)
    {
        this.IsSortKey = value;
        return this;
    }

    public CodeBlock WithCodeSnippet(string value)
    {
        this.CodeSnippet = value;
        return this;
    }

    public CodeBlock WithLanguage(CodeLanguage value)
    {
        this.Language = value;
        return this;
    }

    public CodeBlock WithStartLineNumber(float value)
    {
        this.StartLineNumber = value;
        return this;
    }

    public CodeBlock WithGridArea(string value)
    {
        this.GridArea = value;
        return this;
    }

    public CodeBlock WithFallback(IUnion<CardElement, FallbackElement> value)
    {
        this.Fallback = value;
        return this;
    }
}

public class ComUserMicrosoftGraphComponent : CardElement
{
    [JsonPropertyName("type")]
    public string Type { get; } = "Component";

    [JsonPropertyName("id")]
    public string? Id { get; set; }

    [JsonPropertyName("requires")]
    public HostCapabilities? Requires { get; set; }

    [JsonPropertyName("lang")]
    public string? Lang { get; set; }

    [JsonPropertyName("isVisible")]
    public bool? IsVisible { get; set; }

    [JsonPropertyName("separator")]
    public bool? Separator { get; set; }

    [JsonPropertyName("height")]
    public ElementHeight? Height { get; set; }

    [JsonPropertyName("horizontalAlignment")]
    public HorizontalAlignment? HorizontalAlignment { get; set; }

    [JsonPropertyName("spacing")]
    public Spacing? Spacing { get; set; }

    [JsonPropertyName("targetWidth")]
    public TargetWidth? TargetWidth { get; set; }

    [JsonPropertyName("isSortKey")]
    public bool? IsSortKey { get; set; }

    [JsonPropertyName("name")]
    public string Name { get; } = "graph.microsoft.com/user";

    [JsonPropertyName("properties")]
    public PersonaProperties? Properties { get; set; }

    [JsonPropertyName("grid.area")]
    public string? GridArea { get; set; }

    [JsonPropertyName("fallback")]
    public IUnion<CardElement, FallbackElement>? Fallback { get; set; }

    public ComUserMicrosoftGraphComponent WithId(string value)
    {
        this.Id = value;
        return this;
    }

    public ComUserMicrosoftGraphComponent WithRequires(HostCapabilities value)
    {
        this.Requires = value;
        return this;
    }

    public ComUserMicrosoftGraphComponent WithLang(string value)
    {
        this.Lang = value;
        return this;
    }

    public ComUserMicrosoftGraphComponent WithIsVisible(bool value)
    {
        this.IsVisible = value;
        return this;
    }

    public ComUserMicrosoftGraphComponent WithSeparator(bool value)
    {
        this.Separator = value;
        return this;
    }

    public ComUserMicrosoftGraphComponent WithHeight(ElementHeight value)
    {
        this.Height = value;
        return this;
    }

    public ComUserMicrosoftGraphComponent WithHorizontalAlignment(HorizontalAlignment value)
    {
        this.HorizontalAlignment = value;
        return this;
    }

    public ComUserMicrosoftGraphComponent WithSpacing(Spacing value)
    {
        this.Spacing = value;
        return this;
    }

    public ComUserMicrosoftGraphComponent WithTargetWidth(TargetWidth value)
    {
        this.TargetWidth = value;
        return this;
    }

    public ComUserMicrosoftGraphComponent WithIsSortKey(bool value)
    {
        this.IsSortKey = value;
        return this;
    }

    public ComUserMicrosoftGraphComponent WithProperties(PersonaProperties value)
    {
        this.Properties = value;
        return this;
    }

    public ComUserMicrosoftGraphComponent WithGridArea(string value)
    {
        this.GridArea = value;
        return this;
    }

    public ComUserMicrosoftGraphComponent WithFallback(IUnion<CardElement, FallbackElement> value)
    {
        this.Fallback = value;
        return this;
    }
}

public class PersonaProperties : SerializableObject
{
    [JsonPropertyName("userPrincipalName")]
    public string? UserPrincipalName { get; set; }

    [JsonPropertyName("displayName")]
    public string? DisplayName { get; set; }

    public PersonaProperties WithUserPrincipalName(string value)
    {
        this.UserPrincipalName = value;
        return this;
    }

    public PersonaProperties WithDisplayName(string value)
    {
        this.DisplayName = value;
        return this;
    }
}

public class ComUsersMicrosoftGraphComponent : CardElement
{
    [JsonPropertyName("type")]
    public string Type { get; } = "Component";

    [JsonPropertyName("id")]
    public string? Id { get; set; }

    [JsonPropertyName("requires")]
    public HostCapabilities? Requires { get; set; }

    [JsonPropertyName("lang")]
    public string? Lang { get; set; }

    [JsonPropertyName("isVisible")]
    public bool? IsVisible { get; set; }

    [JsonPropertyName("separator")]
    public bool? Separator { get; set; }

    [JsonPropertyName("height")]
    public ElementHeight? Height { get; set; }

    [JsonPropertyName("horizontalAlignment")]
    public HorizontalAlignment? HorizontalAlignment { get; set; }

    [JsonPropertyName("spacing")]
    public Spacing? Spacing { get; set; }

    [JsonPropertyName("targetWidth")]
    public TargetWidth? TargetWidth { get; set; }

    [JsonPropertyName("isSortKey")]
    public bool? IsSortKey { get; set; }

    [JsonPropertyName("name")]
    public string Name { get; } = "graph.microsoft.com/users";

    [JsonPropertyName("properties")]
    public PersonaSetProperties? Properties { get; set; }

    [JsonPropertyName("grid.area")]
    public string? GridArea { get; set; }

    [JsonPropertyName("fallback")]
    public IUnion<CardElement, FallbackElement>? Fallback { get; set; }

    public ComUsersMicrosoftGraphComponent WithId(string value)
    {
        this.Id = value;
        return this;
    }

    public ComUsersMicrosoftGraphComponent WithRequires(HostCapabilities value)
    {
        this.Requires = value;
        return this;
    }

    public ComUsersMicrosoftGraphComponent WithLang(string value)
    {
        this.Lang = value;
        return this;
    }

    public ComUsersMicrosoftGraphComponent WithIsVisible(bool value)
    {
        this.IsVisible = value;
        return this;
    }

    public ComUsersMicrosoftGraphComponent WithSeparator(bool value)
    {
        this.Separator = value;
        return this;
    }

    public ComUsersMicrosoftGraphComponent WithHeight(ElementHeight value)
    {
        this.Height = value;
        return this;
    }

    public ComUsersMicrosoftGraphComponent WithHorizontalAlignment(HorizontalAlignment value)
    {
        this.HorizontalAlignment = value;
        return this;
    }

    public ComUsersMicrosoftGraphComponent WithSpacing(Spacing value)
    {
        this.Spacing = value;
        return this;
    }

    public ComUsersMicrosoftGraphComponent WithTargetWidth(TargetWidth value)
    {
        this.TargetWidth = value;
        return this;
    }

    public ComUsersMicrosoftGraphComponent WithIsSortKey(bool value)
    {
        this.IsSortKey = value;
        return this;
    }

    public ComUsersMicrosoftGraphComponent WithProperties(PersonaSetProperties value)
    {
        this.Properties = value;
        return this;
    }

    public ComUsersMicrosoftGraphComponent WithGridArea(string value)
    {
        this.GridArea = value;
        return this;
    }

    public ComUsersMicrosoftGraphComponent WithFallback(IUnion<CardElement, FallbackElement> value)
    {
        this.Fallback = value;
        return this;
    }
}

public class PersonaSetProperties : SerializableObject
{
    [JsonPropertyName("users")]
    public IList<PersonaProperties>? Users { get; set; }

    public PersonaSetProperties WithUsers(params IList<PersonaProperties> value)
    {
        this.Users = value;
        return this;
    }
}

public class ComResourceMicrosoftGraphComponent : CardElement
{
    [JsonPropertyName("type")]
    public string Type { get; } = "Component";

    [JsonPropertyName("id")]
    public string? Id { get; set; }

    [JsonPropertyName("requires")]
    public HostCapabilities? Requires { get; set; }

    [JsonPropertyName("lang")]
    public string? Lang { get; set; }

    [JsonPropertyName("isVisible")]
    public bool? IsVisible { get; set; }

    [JsonPropertyName("separator")]
    public bool? Separator { get; set; }

    [JsonPropertyName("height")]
    public ElementHeight? Height { get; set; }

    [JsonPropertyName("horizontalAlignment")]
    public HorizontalAlignment? HorizontalAlignment { get; set; }

    [JsonPropertyName("spacing")]
    public Spacing? Spacing { get; set; }

    [JsonPropertyName("targetWidth")]
    public TargetWidth? TargetWidth { get; set; }

    [JsonPropertyName("isSortKey")]
    public bool? IsSortKey { get; set; }

    [JsonPropertyName("name")]
    public string Name { get; } = "graph.microsoft.com/resource";

    [JsonPropertyName("properties")]
    public ResourceProperties? Properties { get; set; }

    [JsonPropertyName("grid.area")]
    public string? GridArea { get; set; }

    [JsonPropertyName("fallback")]
    public IUnion<CardElement, FallbackElement>? Fallback { get; set; }

    public ComResourceMicrosoftGraphComponent WithId(string value)
    {
        this.Id = value;
        return this;
    }

    public ComResourceMicrosoftGraphComponent WithRequires(HostCapabilities value)
    {
        this.Requires = value;
        return this;
    }

    public ComResourceMicrosoftGraphComponent WithLang(string value)
    {
        this.Lang = value;
        return this;
    }

    public ComResourceMicrosoftGraphComponent WithIsVisible(bool value)
    {
        this.IsVisible = value;
        return this;
    }

    public ComResourceMicrosoftGraphComponent WithSeparator(bool value)
    {
        this.Separator = value;
        return this;
    }

    public ComResourceMicrosoftGraphComponent WithHeight(ElementHeight value)
    {
        this.Height = value;
        return this;
    }

    public ComResourceMicrosoftGraphComponent WithHorizontalAlignment(HorizontalAlignment value)
    {
        this.HorizontalAlignment = value;
        return this;
    }

    public ComResourceMicrosoftGraphComponent WithSpacing(Spacing value)
    {
        this.Spacing = value;
        return this;
    }

    public ComResourceMicrosoftGraphComponent WithTargetWidth(TargetWidth value)
    {
        this.TargetWidth = value;
        return this;
    }

    public ComResourceMicrosoftGraphComponent WithIsSortKey(bool value)
    {
        this.IsSortKey = value;
        return this;
    }

    public ComResourceMicrosoftGraphComponent WithProperties(ResourceProperties value)
    {
        this.Properties = value;
        return this;
    }

    public ComResourceMicrosoftGraphComponent WithGridArea(string value)
    {
        this.GridArea = value;
        return this;
    }

    public ComResourceMicrosoftGraphComponent WithFallback(IUnion<CardElement, FallbackElement> value)
    {
        this.Fallback = value;
        return this;
    }
}

public class ResourceProperties : SerializableObject
{
    [JsonPropertyName("id")]
    public string? Id { get; set; }

    [JsonPropertyName("resourceReference")]
    public IDictionary<string, string>? ResourceReference { get; set; }

    [JsonPropertyName("resourceVisualization")]
    public ResourceVisualization? ResourceVisualization { get; set; }

    public ResourceProperties WithId(string value)
    {
        this.Id = value;
        return this;
    }

    public ResourceProperties WithResourceReference(IDictionary<string, string> value)
    {
        this.ResourceReference = value;
        return this;
    }

    public ResourceProperties WithResourceVisualization(ResourceVisualization value)
    {
        this.ResourceVisualization = value;
        return this;
    }
}

public class ResourceVisualization : SerializableObject
{
    [JsonPropertyName("media")]
    public string? Media { get; set; }

    public ResourceVisualization WithMedia(string value)
    {
        this.Media = value;
        return this;
    }
}

public class ComFileMicrosoftGraphComponent : CardElement
{
    [JsonPropertyName("type")]
    public string Type { get; } = "Component";

    [JsonPropertyName("id")]
    public string? Id { get; set; }

    [JsonPropertyName("requires")]
    public HostCapabilities? Requires { get; set; }

    [JsonPropertyName("lang")]
    public string? Lang { get; set; }

    [JsonPropertyName("isVisible")]
    public bool? IsVisible { get; set; }

    [JsonPropertyName("separator")]
    public bool? Separator { get; set; }

    [JsonPropertyName("height")]
    public ElementHeight? Height { get; set; }

    [JsonPropertyName("horizontalAlignment")]
    public HorizontalAlignment? HorizontalAlignment { get; set; }

    [JsonPropertyName("spacing")]
    public Spacing? Spacing { get; set; }

    [JsonPropertyName("targetWidth")]
    public TargetWidth? TargetWidth { get; set; }

    [JsonPropertyName("isSortKey")]
    public bool? IsSortKey { get; set; }

    [JsonPropertyName("name")]
    public string Name { get; } = "graph.microsoft.com/file";

    [JsonPropertyName("properties")]
    public FileProperties? Properties { get; set; }

    [JsonPropertyName("grid.area")]
    public string? GridArea { get; set; }

    [JsonPropertyName("fallback")]
    public IUnion<CardElement, FallbackElement>? Fallback { get; set; }

    public ComFileMicrosoftGraphComponent WithId(string value)
    {
        this.Id = value;
        return this;
    }

    public ComFileMicrosoftGraphComponent WithRequires(HostCapabilities value)
    {
        this.Requires = value;
        return this;
    }

    public ComFileMicrosoftGraphComponent WithLang(string value)
    {
        this.Lang = value;
        return this;
    }

    public ComFileMicrosoftGraphComponent WithIsVisible(bool value)
    {
        this.IsVisible = value;
        return this;
    }

    public ComFileMicrosoftGraphComponent WithSeparator(bool value)
    {
        this.Separator = value;
        return this;
    }

    public ComFileMicrosoftGraphComponent WithHeight(ElementHeight value)
    {
        this.Height = value;
        return this;
    }

    public ComFileMicrosoftGraphComponent WithHorizontalAlignment(HorizontalAlignment value)
    {
        this.HorizontalAlignment = value;
        return this;
    }

    public ComFileMicrosoftGraphComponent WithSpacing(Spacing value)
    {
        this.Spacing = value;
        return this;
    }

    public ComFileMicrosoftGraphComponent WithTargetWidth(TargetWidth value)
    {
        this.TargetWidth = value;
        return this;
    }

    public ComFileMicrosoftGraphComponent WithIsSortKey(bool value)
    {
        this.IsSortKey = value;
        return this;
    }

    public ComFileMicrosoftGraphComponent WithProperties(FileProperties value)
    {
        this.Properties = value;
        return this;
    }

    public ComFileMicrosoftGraphComponent WithGridArea(string value)
    {
        this.GridArea = value;
        return this;
    }

    public ComFileMicrosoftGraphComponent WithFallback(IUnion<CardElement, FallbackElement> value)
    {
        this.Fallback = value;
        return this;
    }
}

public class FileProperties : SerializableObject
{
    [JsonPropertyName("name")]
    public string? Name { get; set; }

    [JsonPropertyName("extension")]
    public string? Extension { get; set; }

    [JsonPropertyName("url")]
    public string? Url { get; set; }

    public FileProperties WithName(string value)
    {
        this.Name = value;
        return this;
    }

    public FileProperties WithExtension(string value)
    {
        this.Extension = value;
        return this;
    }

    public FileProperties WithUrl(string value)
    {
        this.Url = value;
        return this;
    }
}

public class ComEventMicrosoftGraphComponent : CardElement
{
    [JsonPropertyName("type")]
    public string Type { get; } = "Component";

    [JsonPropertyName("id")]
    public string? Id { get; set; }

    [JsonPropertyName("requires")]
    public HostCapabilities? Requires { get; set; }

    [JsonPropertyName("lang")]
    public string? Lang { get; set; }

    [JsonPropertyName("isVisible")]
    public bool? IsVisible { get; set; }

    [JsonPropertyName("separator")]
    public bool? Separator { get; set; }

    [JsonPropertyName("height")]
    public ElementHeight? Height { get; set; }

    [JsonPropertyName("horizontalAlignment")]
    public HorizontalAlignment? HorizontalAlignment { get; set; }

    [JsonPropertyName("spacing")]
    public Spacing? Spacing { get; set; }

    [JsonPropertyName("targetWidth")]
    public TargetWidth? TargetWidth { get; set; }

    [JsonPropertyName("isSortKey")]
    public bool? IsSortKey { get; set; }

    [JsonPropertyName("name")]
    public string Name { get; } = "graph.microsoft.com/event";

    [JsonPropertyName("properties")]
    public CalendarEventProperties? Properties { get; set; }

    [JsonPropertyName("grid.area")]
    public string? GridArea { get; set; }

    [JsonPropertyName("fallback")]
    public IUnion<CardElement, FallbackElement>? Fallback { get; set; }

    public ComEventMicrosoftGraphComponent WithId(string value)
    {
        this.Id = value;
        return this;
    }

    public ComEventMicrosoftGraphComponent WithRequires(HostCapabilities value)
    {
        this.Requires = value;
        return this;
    }

    public ComEventMicrosoftGraphComponent WithLang(string value)
    {
        this.Lang = value;
        return this;
    }

    public ComEventMicrosoftGraphComponent WithIsVisible(bool value)
    {
        this.IsVisible = value;
        return this;
    }

    public ComEventMicrosoftGraphComponent WithSeparator(bool value)
    {
        this.Separator = value;
        return this;
    }

    public ComEventMicrosoftGraphComponent WithHeight(ElementHeight value)
    {
        this.Height = value;
        return this;
    }

    public ComEventMicrosoftGraphComponent WithHorizontalAlignment(HorizontalAlignment value)
    {
        this.HorizontalAlignment = value;
        return this;
    }

    public ComEventMicrosoftGraphComponent WithSpacing(Spacing value)
    {
        this.Spacing = value;
        return this;
    }

    public ComEventMicrosoftGraphComponent WithTargetWidth(TargetWidth value)
    {
        this.TargetWidth = value;
        return this;
    }

    public ComEventMicrosoftGraphComponent WithIsSortKey(bool value)
    {
        this.IsSortKey = value;
        return this;
    }

    public ComEventMicrosoftGraphComponent WithProperties(CalendarEventProperties value)
    {
        this.Properties = value;
        return this;
    }

    public ComEventMicrosoftGraphComponent WithGridArea(string value)
    {
        this.GridArea = value;
        return this;
    }

    public ComEventMicrosoftGraphComponent WithFallback(IUnion<CardElement, FallbackElement> value)
    {
        this.Fallback = value;
        return this;
    }
}

public class CalendarEventProperties : SerializableObject
{
    [JsonPropertyName("id")]
    public string? Id { get; set; }

    [JsonPropertyName("title")]
    public string? Title { get; set; }

    [JsonPropertyName("start")]
    public string? Start { get; set; }

    [JsonPropertyName("end")]
    public string? End { get; set; }

    [JsonPropertyName("status")]
    public string? Status { get; set; }

    [JsonPropertyName("locations")]
    public IList<string>? Locations { get; set; }

    [JsonPropertyName("onlineMeetingUrl")]
    public string? OnlineMeetingUrl { get; set; }

    [JsonPropertyName("isAllDay")]
    public bool? IsAllDay { get; set; }

    [JsonPropertyName("extension")]
    public string? Extension { get; set; }

    [JsonPropertyName("url")]
    public string? Url { get; set; }

    [JsonPropertyName("attendees")]
    public IList<CalendarEventAttendee>? Attendees { get; set; }

    [JsonPropertyName("organizer")]
    public CalendarEventAttendee? Organizer { get; set; }

    public CalendarEventProperties WithId(string value)
    {
        this.Id = value;
        return this;
    }

    public CalendarEventProperties WithTitle(string value)
    {
        this.Title = value;
        return this;
    }

    public CalendarEventProperties WithStart(string value)
    {
        this.Start = value;
        return this;
    }

    public CalendarEventProperties WithEnd(string value)
    {
        this.End = value;
        return this;
    }

    public CalendarEventProperties WithStatus(string value)
    {
        this.Status = value;
        return this;
    }

    public CalendarEventProperties WithLocations(params IList<string> value)
    {
        this.Locations = value;
        return this;
    }

    public CalendarEventProperties WithOnlineMeetingUrl(string value)
    {
        this.OnlineMeetingUrl = value;
        return this;
    }

    public CalendarEventProperties WithIsAllDay(bool value)
    {
        this.IsAllDay = value;
        return this;
    }

    public CalendarEventProperties WithExtension(string value)
    {
        this.Extension = value;
        return this;
    }

    public CalendarEventProperties WithUrl(string value)
    {
        this.Url = value;
        return this;
    }

    public CalendarEventProperties WithAttendees(params IList<CalendarEventAttendee> value)
    {
        this.Attendees = value;
        return this;
    }

    public CalendarEventProperties WithOrganizer(CalendarEventAttendee value)
    {
        this.Organizer = value;
        return this;
    }
}

public class CalendarEventAttendee : SerializableObject
{
    [JsonPropertyName("name")]
    public string? Name { get; set; }

    [JsonPropertyName("email")]
    public string? Email { get; set; }

    [JsonPropertyName("title")]
    public string? Title { get; set; }

    [JsonPropertyName("type")]
    public string? Type { get; set; }

    [JsonPropertyName("status")]
    public string? Status { get; set; }

    public CalendarEventAttendee WithName(string value)
    {
        this.Name = value;
        return this;
    }

    public CalendarEventAttendee WithEmail(string value)
    {
        this.Email = value;
        return this;
    }

    public CalendarEventAttendee WithTitle(string value)
    {
        this.Title = value;
        return this;
    }

    public CalendarEventAttendee WithType(string value)
    {
        this.Type = value;
        return this;
    }

    public CalendarEventAttendee WithStatus(string value)
    {
        this.Status = value;
        return this;
    }
}

public class CarouselPage : CardElement
{
    [JsonPropertyName("type")]
    public string Type { get; } = "CarouselPage";

    [JsonPropertyName("id")]
    public string? Id { get; set; }

    [JsonPropertyName("requires")]
    public HostCapabilities? Requires { get; set; }

    [JsonPropertyName("lang")]
    public string? Lang { get; set; }

    [JsonPropertyName("isVisible")]
    public bool? IsVisible { get; set; }

    [JsonPropertyName("height")]
    public ElementHeight? Height { get; set; }

    [JsonPropertyName("targetWidth")]
    public TargetWidth? TargetWidth { get; set; }

    [JsonPropertyName("isSortKey")]
    public bool? IsSortKey { get; set; }

    [JsonPropertyName("selectAction")]
    public Action? SelectAction { get; set; }

    [JsonPropertyName("style")]
    public ContainerStyle? Style { get; set; }

    [JsonPropertyName("showBorder")]
    public bool? ShowBorder { get; set; }

    [JsonPropertyName("roundedCorners")]
    public bool? RoundedCorners { get; set; }

    [JsonPropertyName("layouts")]
    public IList<ContainerLayout>? Layouts { get; set; }

    [JsonPropertyName("minHeight")]
    public string? MinHeight { get; set; }

    [JsonPropertyName("backgroundImage")]
    public IUnion<string, BackgroundImage>? BackgroundImage { get; set; }

    [JsonPropertyName("verticalContentAlignment")]
    public VerticalAlignment? VerticalContentAlignment { get; set; }

    [JsonPropertyName("rtl")]
    public bool? Rtl { get; set; }

    [JsonPropertyName("maxHeight")]
    public string? MaxHeight { get; set; }

    [JsonPropertyName("grid.area")]
    public string? GridArea { get; set; }

    [JsonPropertyName("fallback")]
    public IUnion<CardElement, FallbackElement>? Fallback { get; set; }

    [JsonPropertyName("items")]
    public IList<CardElement>? Items { get; set; }

    public CarouselPage(params IList<CardElement> items)
    {
        this.Items = items;
    }

    public CarouselPage WithId(string value)
    {
        this.Id = value;
        return this;
    }

    public CarouselPage WithRequires(HostCapabilities value)
    {
        this.Requires = value;
        return this;
    }

    public CarouselPage WithLang(string value)
    {
        this.Lang = value;
        return this;
    }

    public CarouselPage WithIsVisible(bool value)
    {
        this.IsVisible = value;
        return this;
    }

    public CarouselPage WithHeight(ElementHeight value)
    {
        this.Height = value;
        return this;
    }

    public CarouselPage WithTargetWidth(TargetWidth value)
    {
        this.TargetWidth = value;
        return this;
    }

    public CarouselPage WithIsSortKey(bool value)
    {
        this.IsSortKey = value;
        return this;
    }

    public CarouselPage WithSelectAction(Action value)
    {
        this.SelectAction = value;
        return this;
    }

    public CarouselPage WithStyle(ContainerStyle value)
    {
        this.Style = value;
        return this;
    }

    public CarouselPage WithShowBorder(bool value)
    {
        this.ShowBorder = value;
        return this;
    }

    public CarouselPage WithRoundedCorners(bool value)
    {
        this.RoundedCorners = value;
        return this;
    }

    public CarouselPage WithLayouts(params IList<ContainerLayout> value)
    {
        this.Layouts = value;
        return this;
    }

    public CarouselPage WithMinHeight(string value)
    {
        this.MinHeight = value;
        return this;
    }

    public CarouselPage WithBackgroundImage(IUnion<string, BackgroundImage> value)
    {
        this.BackgroundImage = value;
        return this;
    }

    public CarouselPage WithVerticalContentAlignment(VerticalAlignment value)
    {
        this.VerticalContentAlignment = value;
        return this;
    }

    public CarouselPage WithRtl(bool value)
    {
        this.Rtl = value;
        return this;
    }

    public CarouselPage WithMaxHeight(string value)
    {
        this.MaxHeight = value;
        return this;
    }

    public CarouselPage WithGridArea(string value)
    {
        this.GridArea = value;
        return this;
    }

    public CarouselPage WithFallback(IUnion<CardElement, FallbackElement> value)
    {
        this.Fallback = value;
        return this;
    }

    public CarouselPage WithItems(params IList<CardElement> value)
    {
        this.Items = value;
        return this;
    }
}

public class TableRow : CardElement
{
    [JsonPropertyName("type")]
    public string Type { get; } = "TableRow";

    [JsonPropertyName("id")]
    public string? Id { get; set; }

    [JsonPropertyName("requires")]
    public HostCapabilities? Requires { get; set; }

    [JsonPropertyName("lang")]
    public string? Lang { get; set; }

    [JsonPropertyName("isVisible")]
    public bool? IsVisible { get; set; }

    [JsonPropertyName("separator")]
    public bool? Separator { get; set; }

    [JsonPropertyName("height")]
    public ElementHeight? Height { get; set; }

    [JsonPropertyName("horizontalAlignment")]
    public HorizontalAlignment? HorizontalAlignment { get; set; }

    [JsonPropertyName("spacing")]
    public Spacing? Spacing { get; set; }

    [JsonPropertyName("targetWidth")]
    public TargetWidth? TargetWidth { get; set; }

    [JsonPropertyName("isSortKey")]
    public bool? IsSortKey { get; set; }

    [JsonPropertyName("showBorder")]
    public bool? ShowBorder { get; set; }

    [JsonPropertyName("roundedCorners")]
    public bool? RoundedCorners { get; set; }

    [JsonPropertyName("style")]
    public ContainerStyle? Style { get; set; }

    [JsonPropertyName("horizontalCellContentAlignment")]
    public HorizontalAlignment? HorizontalCellContentAlignment { get; set; }

    [JsonPropertyName("verticalCellContentAlignment")]
    public VerticalAlignment? VerticalCellContentAlignment { get; set; }

    [JsonPropertyName("grid.area")]
    public string? GridArea { get; set; }

    [JsonPropertyName("fallback")]
    public IUnion<CardElement, FallbackElement>? Fallback { get; set; }

    [JsonPropertyName("cells")]
    public IList<TableCell>? Cells { get; set; }

    public TableRow WithId(string value)
    {
        this.Id = value;
        return this;
    }

    public TableRow WithRequires(HostCapabilities value)
    {
        this.Requires = value;
        return this;
    }

    public TableRow WithLang(string value)
    {
        this.Lang = value;
        return this;
    }

    public TableRow WithIsVisible(bool value)
    {
        this.IsVisible = value;
        return this;
    }

    public TableRow WithSeparator(bool value)
    {
        this.Separator = value;
        return this;
    }

    public TableRow WithHeight(ElementHeight value)
    {
        this.Height = value;
        return this;
    }

    public TableRow WithHorizontalAlignment(HorizontalAlignment value)
    {
        this.HorizontalAlignment = value;
        return this;
    }

    public TableRow WithSpacing(Spacing value)
    {
        this.Spacing = value;
        return this;
    }

    public TableRow WithTargetWidth(TargetWidth value)
    {
        this.TargetWidth = value;
        return this;
    }

    public TableRow WithIsSortKey(bool value)
    {
        this.IsSortKey = value;
        return this;
    }

    public TableRow WithShowBorder(bool value)
    {
        this.ShowBorder = value;
        return this;
    }

    public TableRow WithRoundedCorners(bool value)
    {
        this.RoundedCorners = value;
        return this;
    }

    public TableRow WithStyle(ContainerStyle value)
    {
        this.Style = value;
        return this;
    }

    public TableRow WithHorizontalCellContentAlignment(HorizontalAlignment value)
    {
        this.HorizontalCellContentAlignment = value;
        return this;
    }

    public TableRow WithVerticalCellContentAlignment(VerticalAlignment value)
    {
        this.VerticalCellContentAlignment = value;
        return this;
    }

    public TableRow WithGridArea(string value)
    {
        this.GridArea = value;
        return this;
    }

    public TableRow WithFallback(IUnion<CardElement, FallbackElement> value)
    {
        this.Fallback = value;
        return this;
    }

    public TableRow WithCells(params IList<TableCell> value)
    {
        this.Cells = value;
        return this;
    }
}

public class TableCell : CardElement
{
    [JsonPropertyName("type")]
    public string Type { get; } = "TableCell";

    [JsonPropertyName("id")]
    public string? Id { get; set; }

    [JsonPropertyName("requires")]
    public HostCapabilities? Requires { get; set; }

    [JsonPropertyName("lang")]
    public string? Lang { get; set; }

    [JsonPropertyName("isVisible")]
    public bool? IsVisible { get; set; }

    [JsonPropertyName("separator")]
    public bool? Separator { get; set; }

    [JsonPropertyName("height")]
    public ElementHeight? Height { get; set; }

    [JsonPropertyName("spacing")]
    public Spacing? Spacing { get; set; }

    [JsonPropertyName("targetWidth")]
    public TargetWidth? TargetWidth { get; set; }

    [JsonPropertyName("isSortKey")]
    public bool? IsSortKey { get; set; }

    [JsonPropertyName("selectAction")]
    public Action? SelectAction { get; set; }

    [JsonPropertyName("style")]
    public ContainerStyle? Style { get; set; }

    [JsonPropertyName("layouts")]
    public IList<ContainerLayout>? Layouts { get; set; }

    [JsonPropertyName("bleed")]
    public bool? Bleed { get; set; }

    [JsonPropertyName("minHeight")]
    public string? MinHeight { get; set; }

    [JsonPropertyName("backgroundImage")]
    public IUnion<string, BackgroundImage>? BackgroundImage { get; set; }

    [JsonPropertyName("verticalContentAlignment")]
    public VerticalAlignment? VerticalContentAlignment { get; set; }

    [JsonPropertyName("rtl")]
    public bool? Rtl { get; set; }

    [JsonPropertyName("maxHeight")]
    public string? MaxHeight { get; set; }

    [JsonPropertyName("grid.area")]
    public string? GridArea { get; set; }

    [JsonPropertyName("fallback")]
    public IUnion<CardElement, FallbackElement>? Fallback { get; set; }

    [JsonPropertyName("items")]
    public IList<CardElement>? Items { get; set; }

    public TableCell(params IList<CardElement> items)
    {
        this.Items = items;
    }

    public TableCell WithId(string value)
    {
        this.Id = value;
        return this;
    }

    public TableCell WithRequires(HostCapabilities value)
    {
        this.Requires = value;
        return this;
    }

    public TableCell WithLang(string value)
    {
        this.Lang = value;
        return this;
    }

    public TableCell WithIsVisible(bool value)
    {
        this.IsVisible = value;
        return this;
    }

    public TableCell WithSeparator(bool value)
    {
        this.Separator = value;
        return this;
    }

    public TableCell WithHeight(ElementHeight value)
    {
        this.Height = value;
        return this;
    }

    public TableCell WithSpacing(Spacing value)
    {
        this.Spacing = value;
        return this;
    }

    public TableCell WithTargetWidth(TargetWidth value)
    {
        this.TargetWidth = value;
        return this;
    }

    public TableCell WithIsSortKey(bool value)
    {
        this.IsSortKey = value;
        return this;
    }

    public TableCell WithSelectAction(Action value)
    {
        this.SelectAction = value;
        return this;
    }

    public TableCell WithStyle(ContainerStyle value)
    {
        this.Style = value;
        return this;
    }

    public TableCell WithLayouts(params IList<ContainerLayout> value)
    {
        this.Layouts = value;
        return this;
    }

    public TableCell WithBleed(bool value)
    {
        this.Bleed = value;
        return this;
    }

    public TableCell WithMinHeight(string value)
    {
        this.MinHeight = value;
        return this;
    }

    public TableCell WithBackgroundImage(IUnion<string, BackgroundImage> value)
    {
        this.BackgroundImage = value;
        return this;
    }

    public TableCell WithVerticalContentAlignment(VerticalAlignment value)
    {
        this.VerticalContentAlignment = value;
        return this;
    }

    public TableCell WithRtl(bool value)
    {
        this.Rtl = value;
        return this;
    }

    public TableCell WithMaxHeight(string value)
    {
        this.MaxHeight = value;
        return this;
    }

    public TableCell WithGridArea(string value)
    {
        this.GridArea = value;
        return this;
    }

    public TableCell WithFallback(IUnion<CardElement, FallbackElement> value)
    {
        this.Fallback = value;
        return this;
    }

    public TableCell WithItems(params IList<CardElement> value)
    {
        this.Items = value;
        return this;
    }
}

public class TextRun : CardElement
{
    [JsonPropertyName("type")]
    public string Type { get; } = "TextRun";

    [JsonPropertyName("id")]
    public string? Id { get; set; }

    [JsonPropertyName("lang")]
    public string? Lang { get; set; }

    [JsonPropertyName("isVisible")]
    public bool? IsVisible { get; set; }

    [JsonPropertyName("isSortKey")]
    public bool? IsSortKey { get; set; }

    [JsonPropertyName("text")]
    public string? Text { get; set; }

    [JsonPropertyName("size")]
    public TextSize? Size { get; set; }

    [JsonPropertyName("weight")]
    public TextWeight? Weight { get; set; }

    [JsonPropertyName("color")]
    public TextColor? Color { get; set; }

    [JsonPropertyName("isSubtle")]
    public bool? IsSubtle { get; set; }

    [JsonPropertyName("fontType")]
    public FontType? FontType { get; set; }

    [JsonPropertyName("italic")]
    public bool? Italic { get; set; }

    [JsonPropertyName("strikethrough")]
    public bool? Strikethrough { get; set; }

    [JsonPropertyName("highlight")]
    public bool? Highlight { get; set; }

    [JsonPropertyName("underline")]
    public bool? Underline { get; set; }

    [JsonPropertyName("selectAction")]
    public Action? SelectAction { get; set; }

    [JsonPropertyName("grid.area")]
    public string? GridArea { get; set; }

    [JsonPropertyName("fallback")]
    public IUnion<CardElement, FallbackElement>? Fallback { get; set; }

    public TextRun(string text)
    {
        this.Text = text;
    }

    public TextRun WithId(string value)
    {
        this.Id = value;
        return this;
    }

    public TextRun WithLang(string value)
    {
        this.Lang = value;
        return this;
    }

    public TextRun WithIsVisible(bool value)
    {
        this.IsVisible = value;
        return this;
    }

    public TextRun WithIsSortKey(bool value)
    {
        this.IsSortKey = value;
        return this;
    }

    public TextRun WithText(string value)
    {
        this.Text = value;
        return this;
    }

    public TextRun WithSize(TextSize value)
    {
        this.Size = value;
        return this;
    }

    public TextRun WithWeight(TextWeight value)
    {
        this.Weight = value;
        return this;
    }

    public TextRun WithColor(TextColor value)
    {
        this.Color = value;
        return this;
    }

    public TextRun WithIsSubtle(bool value)
    {
        this.IsSubtle = value;
        return this;
    }

    public TextRun WithFontType(FontType value)
    {
        this.FontType = value;
        return this;
    }

    public TextRun WithItalic(bool value)
    {
        this.Italic = value;
        return this;
    }

    public TextRun WithStrikethrough(bool value)
    {
        this.Strikethrough = value;
        return this;
    }

    public TextRun WithHighlight(bool value)
    {
        this.Highlight = value;
        return this;
    }

    public TextRun WithUnderline(bool value)
    {
        this.Underline = value;
        return this;
    }

    public TextRun WithSelectAction(Action value)
    {
        this.SelectAction = value;
        return this;
    }

    public TextRun WithGridArea(string value)
    {
        this.GridArea = value;
        return this;
    }

    public TextRun WithFallback(IUnion<CardElement, FallbackElement> value)
    {
        this.Fallback = value;
        return this;
    }
}

public class Column : CardElement
{
    [JsonPropertyName("type")]
    public string Type { get; } = "Column";

    [JsonPropertyName("id")]
    public string? Id { get; set; }

    [JsonPropertyName("requires")]
    public HostCapabilities? Requires { get; set; }

    [JsonPropertyName("lang")]
    public string? Lang { get; set; }

    [JsonPropertyName("isVisible")]
    public bool? IsVisible { get; set; }

    [JsonPropertyName("separator")]
    public bool? Separator { get; set; }

    [JsonPropertyName("height")]
    public ElementHeight? Height { get; set; }

    [JsonPropertyName("horizontalAlignment")]
    public HorizontalAlignment? HorizontalAlignment { get; set; }

    [JsonPropertyName("spacing")]
    public Spacing? Spacing { get; set; }

    [JsonPropertyName("targetWidth")]
    public TargetWidth? TargetWidth { get; set; }

    [JsonPropertyName("isSortKey")]
    public bool? IsSortKey { get; set; }

    [JsonPropertyName("selectAction")]
    public Action? SelectAction { get; set; }

    [JsonPropertyName("style")]
    public ContainerStyle? Style { get; set; }

    [JsonPropertyName("showBorder")]
    public bool? ShowBorder { get; set; }

    [JsonPropertyName("roundedCorners")]
    public bool? RoundedCorners { get; set; }

    [JsonPropertyName("layouts")]
    public IList<ContainerLayout>? Layouts { get; set; }

    [JsonPropertyName("bleed")]
    public bool? Bleed { get; set; }

    [JsonPropertyName("minHeight")]
    public string? MinHeight { get; set; }

    [JsonPropertyName("backgroundImage")]
    public IUnion<string, BackgroundImage>? BackgroundImage { get; set; }

    [JsonPropertyName("verticalContentAlignment")]
    public VerticalAlignment? VerticalContentAlignment { get; set; }

    [JsonPropertyName("rtl")]
    public bool? Rtl { get; set; }

    [JsonPropertyName("maxHeight")]
    public string? MaxHeight { get; set; }

    [JsonPropertyName("width")]
    public IUnion<string, float>? Width { get; set; }

    [JsonPropertyName("grid.area")]
    public string? GridArea { get; set; }

    [JsonPropertyName("fallback")]
    public IUnion<CardElement, FallbackElement>? Fallback { get; set; }

    [JsonPropertyName("items")]
    public IList<CardElement>? Items { get; set; }

    public Column(params IList<CardElement> items)
    {
        this.Items = items;
    }

    public Column WithId(string value)
    {
        this.Id = value;
        return this;
    }

    public Column WithRequires(HostCapabilities value)
    {
        this.Requires = value;
        return this;
    }

    public Column WithLang(string value)
    {
        this.Lang = value;
        return this;
    }

    public Column WithIsVisible(bool value)
    {
        this.IsVisible = value;
        return this;
    }

    public Column WithSeparator(bool value)
    {
        this.Separator = value;
        return this;
    }

    public Column WithHeight(ElementHeight value)
    {
        this.Height = value;
        return this;
    }

    public Column WithHorizontalAlignment(HorizontalAlignment value)
    {
        this.HorizontalAlignment = value;
        return this;
    }

    public Column WithSpacing(Spacing value)
    {
        this.Spacing = value;
        return this;
    }

    public Column WithTargetWidth(TargetWidth value)
    {
        this.TargetWidth = value;
        return this;
    }

    public Column WithIsSortKey(bool value)
    {
        this.IsSortKey = value;
        return this;
    }

    public Column WithSelectAction(Action value)
    {
        this.SelectAction = value;
        return this;
    }

    public Column WithStyle(ContainerStyle value)
    {
        this.Style = value;
        return this;
    }

    public Column WithShowBorder(bool value)
    {
        this.ShowBorder = value;
        return this;
    }

    public Column WithRoundedCorners(bool value)
    {
        this.RoundedCorners = value;
        return this;
    }

    public Column WithLayouts(params IList<ContainerLayout> value)
    {
        this.Layouts = value;
        return this;
    }

    public Column WithBleed(bool value)
    {
        this.Bleed = value;
        return this;
    }

    public Column WithMinHeight(string value)
    {
        this.MinHeight = value;
        return this;
    }

    public Column WithBackgroundImage(IUnion<string, BackgroundImage> value)
    {
        this.BackgroundImage = value;
        return this;
    }

    public Column WithVerticalContentAlignment(VerticalAlignment value)
    {
        this.VerticalContentAlignment = value;
        return this;
    }

    public Column WithRtl(bool value)
    {
        this.Rtl = value;
        return this;
    }

    public Column WithMaxHeight(string value)
    {
        this.MaxHeight = value;
        return this;
    }

    public Column WithWidth(IUnion<string, float> value)
    {
        this.Width = value;
        return this;
    }

    public Column WithGridArea(string value)
    {
        this.GridArea = value;
        return this;
    }

    public Column WithFallback(IUnion<CardElement, FallbackElement> value)
    {
        this.Fallback = value;
        return this;
    }

    public Column WithItems(params IList<CardElement> value)
    {
        this.Items = value;
        return this;
    }
}